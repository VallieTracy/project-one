diff --git a/Team_Awesome_Project_1.ipynb b/Team_Awesome_Project_1.ipynb
index 5d372c6..77efd0e 100644
--- a/Team_Awesome_Project_1.ipynb
+++ b/Team_Awesome_Project_1.ipynb
@@ -2,27 +2,27 @@
  "cells": [
   {
    "cell_type": "code",
-
-   "execution_count": 1,
+   "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
-    "%matplotlib notebook"
+    "# %matplotlib notebook"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 1,
    "metadata": {},
    "outputs": [],
    "source": [
     "import pandas as pd\n",
-    "import matplotlib as plt"
+    "import matplotlib.pyplot as plt\n",
+    "import math"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 2,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -31,7 +31,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 3,
    "metadata": {},
    "outputs": [
     {
@@ -222,7 +222,7 @@
        "[5 rows x 220 columns]"
       ]
      },
-     "execution_count": 7,
+     "execution_count": 3,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -237,7 +237,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 4,
    "metadata": {},
    "outputs": [
     {
@@ -428,7 +428,7 @@
        "[5 rows x 216 columns]"
       ]
      },
-     "execution_count": 8,
+     "execution_count": 4,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -441,7 +441,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [
     {
@@ -632,7 +632,7 @@
        "[5 rows x 242 columns]"
       ]
      },
-     "execution_count": 9,
+     "execution_count": 5,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -646,7 +646,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 6,
    "metadata": {},
    "outputs": [
     {
@@ -844,7 +844,7 @@
        "[5 rows x 302 columns]"
       ]
      },
-     "execution_count": 10,
+     "execution_count": 6,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -857,55 +857,226 @@
   },
   {
    "cell_type": "code",
-
-   "execution_count": null,
+   "execution_count": 7,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "1390000000\n"
+     ]
+    }
+   ],
    "source": [
-
-    "# For reference only:\n",
-    "# these are the years we are interested in:  [1804, 1834, 1864, 1894, 1824, 1954, 1984, and 2014]"
-
+    "# Find the maximum population in the dataset\n",
+    "max_pop = population_df['2014'].max()\n",
+    "print(max_pop)\n",
+    "\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 8,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "9.143014800254095\n"
+     ]
+    }
+   ],
    "source": [
-
-    "# Step 2: Merge the data...BUT FIRST!! To prep for an inner join (where the only data merged is\n",
-    "# whatever matches in our reference columns), we can dropna() first, and then merge\n",
-    "\n",
-    "# Removing \"not a number's\"\n",
-    "\n",
-    "birthrate_df = birthrate_df.dropna()\n",
-    "co2_df = co2_df.dropna()"
-
+    "max_log = math.log10(max_pop)\n",
+    "print(max_log)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 9,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>country</th>\n",
+       "      <th>1800</th>\n",
+       "      <th>1801</th>\n",
+       "      <th>1802</th>\n",
+       "      <th>1803</th>\n",
+       "      <th>1804</th>\n",
+       "      <th>1805</th>\n",
+       "      <th>1806</th>\n",
+       "      <th>1807</th>\n",
+       "      <th>1808</th>\n",
+       "      <th>...</th>\n",
+       "      <th>2091</th>\n",
+       "      <th>2092</th>\n",
+       "      <th>2093</th>\n",
+       "      <th>2094</th>\n",
+       "      <th>2095</th>\n",
+       "      <th>2096</th>\n",
+       "      <th>2097</th>\n",
+       "      <th>2098</th>\n",
+       "      <th>2099</th>\n",
+       "      <th>2100</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>35</th>\n",
+       "      <td>China</td>\n",
+       "      <td>322000000</td>\n",
+       "      <td>324000000</td>\n",
+       "      <td>327000000</td>\n",
+       "      <td>330000000</td>\n",
+       "      <td>333000000</td>\n",
+       "      <td>336000000</td>\n",
+       "      <td>338000000</td>\n",
+       "      <td>341000000</td>\n",
+       "      <td>344000000</td>\n",
+       "      <td>...</td>\n",
+       "      <td>1070000000</td>\n",
+       "      <td>1060000000</td>\n",
+       "      <td>1060000000</td>\n",
+       "      <td>1050000000</td>\n",
+       "      <td>1050000000</td>\n",
+       "      <td>1040000000</td>\n",
+       "      <td>1040000000</td>\n",
+       "      <td>1030000000</td>\n",
+       "      <td>1030000000</td>\n",
+       "      <td>1020000000</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>1 rows Ã— 302 columns</p>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "   country       1800       1801       1802       1803       1804       1805  \\\n",
+       "35   China  322000000  324000000  327000000  330000000  333000000  336000000   \n",
+       "\n",
+       "         1806       1807       1808  ...        2091        2092        2093  \\\n",
+       "35  338000000  341000000  344000000  ...  1070000000  1060000000  1060000000   \n",
+       "\n",
+       "          2094        2095        2096        2097        2098        2099  \\\n",
+       "35  1050000000  1050000000  1040000000  1040000000  1030000000  1030000000   \n",
+       "\n",
+       "          2100  \n",
+       "35  1020000000  \n",
+       "\n",
+       "[1 rows x 302 columns]"
+      ]
+     },
+     "execution_count": 9,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
-
-    "# Step 3: Clean the data (dropna, isolate the specific year columns we're interested in)"
-
+    "# Find the country associated with the max population\n",
+    "population_df.loc[population_df['2014'] == 1390000000]"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 12,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Country</th>\n",
+       "      <th>Population</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>Afghanistan</td>\n",
+       "      <td>3280000</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>Albania</td>\n",
+       "      <td>416000</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>Algeria</td>\n",
+       "      <td>2540000</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>Andorra</td>\n",
+       "      <td>2650</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>Angola</td>\n",
+       "      <td>1570000</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "       Country  Population\n",
+       "0  Afghanistan     3280000\n",
+       "1      Albania      416000\n",
+       "2      Algeria     2540000\n",
+       "3      Andorra        2650\n",
+       "4       Angola     1570000"
+      ]
+     },
+     "execution_count": 12,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
-
-    "# Step 4: Plot our data with CO2 emissions on the x-axis, and birthrate on the y-axis\n",
-    "# BONUS: try formatting dot size by population or income level"
-
+    "population_1804_df = population_df[[\"country\", \"1804\"]]\n",
+    "\n",
+    "population_1804_df = population_1804_df.rename(columns={\"country\": \"Country\", \"1804\": \"Population\"})\n",
+    "population_1804_df.head()"
    ]
   },
   {
@@ -913,15 +1084,2133 @@
    "execution_count": null,
    "metadata": {},
    "outputs": [],
-
    "source": []
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 13,
    "metadata": {},
    "outputs": [],
-   "source": []
+   "source": [
+    "# For reference only:\n",
+    "# these are the years we are interested in:  [1804, 1834, 1864, 1894, 1824, 1954, 1984, and 2014]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 14,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>country</th>\n",
+       "      <th>1984</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>Afghanistan</td>\n",
+       "      <td>7.46</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>Albania</td>\n",
+       "      <td>3.32</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>Algeria</td>\n",
+       "      <td>6.04</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>Angola</td>\n",
+       "      <td>7.39</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>Antigua and Barbuda</td>\n",
+       "      <td>2.10</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "               country  1984\n",
+       "0          Afghanistan  7.46\n",
+       "1              Albania  3.32\n",
+       "2              Algeria  6.04\n",
+       "3               Angola  7.39\n",
+       "4  Antigua and Barbuda  2.10"
+      ]
+     },
+     "execution_count": 14,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "# Step 1.5: We need to create individual df's for each of our target years, THEN do the dropna's, and THEN merge them together. \n",
+    "birthrate_1804_df = birthrate_df[[\"country\", \"1804\"]]\n",
+    "birthrate_1834_df = birthrate_df[[\"country\", \"1834\"]]\n",
+    "birthrate_1864_df = birthrate_df[[\"country\", \"1864\"]]\n",
+    "birthrate_1894_df = birthrate_df[[\"country\", \"1894\"]]\n",
+    "birthrate_1924_df = birthrate_df[[\"country\", \"1924\"]]\n",
+    "birthrate_1954_df = birthrate_df[[\"country\", \"1954\"]]\n",
+    "birthrate_1984_df = birthrate_df[[\"country\", \"1984\"]]\n",
+    "birthrate_2014_df = birthrate_df[[\"country\", \"2014\"]]\n",
+    "\n",
+    "birthrate_1984_df.head()\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 15,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "country    Zimbabwe\n",
+       "1800           2.16\n",
+       "1801           2.14\n",
+       "1802           2.13\n",
+       "1803           2.36\n",
+       "             ...   \n",
+       "2010           40.7\n",
+       "2011           41.2\n",
+       "2012           44.6\n",
+       "2013           37.8\n",
+       "2014           45.4\n",
+       "Length: 216, dtype: object"
+      ]
+     },
+     "execution_count": 15,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "# Creating df's for CO2\n",
+    "\n",
+    "co2_1804_df = co2_df[[\"country\", \"1804\"]]\n",
+    "co2_1834_df = co2_df[[\"country\", \"1834\"]]\n",
+    "co2_1864_df = co2_df[[\"country\", \"1864\"]]\n",
+    "co2_1894_df = co2_df[[\"country\", \"1894\"]]\n",
+    "co2_1924_df = co2_df[[\"country\", \"1924\"]]\n",
+    "co2_1954_df = co2_df[[\"country\", \"1954\"]]\n",
+    "co2_1984_df = co2_df[[\"country\", \"1984\"]]\n",
+    "co2_2014_df = co2_df[[\"country\", \"2014\"]]\n",
+    "\n",
+    "co2_df.max()\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 16,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>country</th>\n",
+       "      <th>1804_x</th>\n",
+       "      <th>1804_y</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>29</th>\n",
+       "      <td>Canada</td>\n",
+       "      <td>0.00542</td>\n",
+       "      <td>5.72</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>57</th>\n",
+       "      <td>France</td>\n",
+       "      <td>0.07330</td>\n",
+       "      <td>4.21</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>61</th>\n",
+       "      <td>Germany</td>\n",
+       "      <td>0.04330</td>\n",
+       "      <td>5.38</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>130</th>\n",
+       "      <td>Poland</td>\n",
+       "      <td>0.04730</td>\n",
+       "      <td>6.22</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>174</th>\n",
+       "      <td>United Kingdom</td>\n",
+       "      <td>2.34000</td>\n",
+       "      <td>5.65</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "            country   1804_x  1804_y\n",
+       "29           Canada  0.00542    5.72\n",
+       "57           France  0.07330    4.21\n",
+       "61          Germany  0.04330    5.38\n",
+       "130          Poland  0.04730    6.22\n",
+       "174  United Kingdom  2.34000    5.65"
+      ]
+     },
+     "execution_count": 16,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "# Merge each year's df's into a single df for the year (e.g. merge co2_1804 and birthrate_1804 together, based on country)\n",
+    "\n",
+    "merged_1804_df = pd.merge(co2_1804_df, birthrate_1804_df, on='country', how='inner')\n",
+    "merged_1804_df = merged_1804_df.dropna()\n",
+    "merged_1804_df.head()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 17,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Country</th>\n",
+       "      <th>CO2 Emissions</th>\n",
+       "      <th>Birthrate</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>29</th>\n",
+       "      <td>Canada</td>\n",
+       "      <td>0.00542</td>\n",
+       "      <td>5.72</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>57</th>\n",
+       "      <td>France</td>\n",
+       "      <td>0.07330</td>\n",
+       "      <td>4.21</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>61</th>\n",
+       "      <td>Germany</td>\n",
+       "      <td>0.04330</td>\n",
+       "      <td>5.38</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>130</th>\n",
+       "      <td>Poland</td>\n",
+       "      <td>0.04730</td>\n",
+       "      <td>6.22</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>174</th>\n",
+       "      <td>United Kingdom</td>\n",
+       "      <td>2.34000</td>\n",
+       "      <td>5.65</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "            Country  CO2 Emissions  Birthrate\n",
+       "29           Canada        0.00542       5.72\n",
+       "57           France        0.07330       4.21\n",
+       "61          Germany        0.04330       5.38\n",
+       "130          Poland        0.04730       6.22\n",
+       "174  United Kingdom        2.34000       5.65"
+      ]
+     },
+     "execution_count": 17,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "merged_1804_df = merged_1804_df.rename(columns={\"country\": \"Country\", \"1804_x\": \"CO2 Emissions\", \"1804_y\": \"Birthrate\"})\n",
+    "merged_1804_df.head()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>country</th>\n",
+       "      <th>1804</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>Afghanistan</td>\n",
+       "      <td>603</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>Albania</td>\n",
+       "      <td>667</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>Algeria</td>\n",
+       "      <td>719</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>Andorra</td>\n",
+       "      <td>1210</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>Angola</td>\n",
+       "      <td>628</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "       country  1804\n",
+       "0  Afghanistan   603\n",
+       "1      Albania   667\n",
+       "2      Algeria   719\n",
+       "3      Andorra  1210\n",
+       "4       Angola   628"
+      ]
+     },
+     "execution_count": 18,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "population_1804_df = population_df[[\"country\", \"1804\"]]\n",
+    "income_1804_df = income_df[[\"country\", \"1804\"]]\n",
+    "\n",
+    "income_1804_df.head()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 19,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>country</th>\n",
+       "      <th>1804_x</th>\n",
+       "      <th>1804_y</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>Afghanistan</td>\n",
+       "      <td>3280000</td>\n",
+       "      <td>603</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>Albania</td>\n",
+       "      <td>416000</td>\n",
+       "      <td>667</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>Algeria</td>\n",
+       "      <td>2540000</td>\n",
+       "      <td>719</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>Andorra</td>\n",
+       "      <td>2650</td>\n",
+       "      <td>1210</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>Angola</td>\n",
+       "      <td>1570000</td>\n",
+       "      <td>628</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "       country   1804_x  1804_y\n",
+       "0  Afghanistan  3280000     603\n",
+       "1      Albania   416000     667\n",
+       "2      Algeria  2540000     719\n",
+       "3      Andorra     2650    1210\n",
+       "4       Angola  1570000     628"
+      ]
+     },
+     "execution_count": 19,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "second_merge_1804_df = pd.merge(population_1804_df, income_1804_df, on='country', how='inner')\n",
+    "second_merge_1804_df.head()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 20,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Country</th>\n",
+       "      <th>Population</th>\n",
+       "      <th>Income</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>Afghanistan</td>\n",
+       "      <td>3280000</td>\n",
+       "      <td>603</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>Albania</td>\n",
+       "      <td>416000</td>\n",
+       "      <td>667</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>Algeria</td>\n",
+       "      <td>2540000</td>\n",
+       "      <td>719</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>Andorra</td>\n",
+       "      <td>2650</td>\n",
+       "      <td>1210</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>Angola</td>\n",
+       "      <td>1570000</td>\n",
+       "      <td>628</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "       Country  Population  Income\n",
+       "0  Afghanistan     3280000     603\n",
+       "1      Albania      416000     667\n",
+       "2      Algeria     2540000     719\n",
+       "3      Andorra        2650    1210\n",
+       "4       Angola     1570000     628"
+      ]
+     },
+     "execution_count": 20,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "second_merge_1804_df = second_merge_1804_df.rename(columns={\"country\": \"Country\", \"1804_x\": \"Population\", \"1804_y\": \"Income\"})\n",
+    "second_merge_1804_df = second_merge_1804_df.dropna()\n",
+    "second_merge_1804_df.head()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 21,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Country</th>\n",
+       "      <th>CO2 Emissions</th>\n",
+       "      <th>Birthrate</th>\n",
+       "      <th>Population</th>\n",
+       "      <th>Income</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>Canada</td>\n",
+       "      <td>0.00542</td>\n",
+       "      <td>5.72</td>\n",
+       "      <td>677000</td>\n",
+       "      <td>1350</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>France</td>\n",
+       "      <td>0.07330</td>\n",
+       "      <td>4.21</td>\n",
+       "      <td>29700000</td>\n",
+       "      <td>1820</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>Germany</td>\n",
+       "      <td>0.04330</td>\n",
+       "      <td>5.38</td>\n",
+       "      <td>23300000</td>\n",
+       "      <td>1690</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>Poland</td>\n",
+       "      <td>0.04730</td>\n",
+       "      <td>6.22</td>\n",
+       "      <td>9690000</td>\n",
+       "      <td>1230</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>United Kingdom</td>\n",
+       "      <td>2.34000</td>\n",
+       "      <td>5.65</td>\n",
+       "      <td>13000000</td>\n",
+       "      <td>3290</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "          Country  CO2 Emissions  Birthrate  Population  Income\n",
+       "0          Canada        0.00542       5.72      677000    1350\n",
+       "1          France        0.07330       4.21    29700000    1820\n",
+       "2         Germany        0.04330       5.38    23300000    1690\n",
+       "3          Poland        0.04730       6.22     9690000    1230\n",
+       "4  United Kingdom        2.34000       5.65    13000000    3290"
+      ]
+     },
+     "execution_count": 21,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "final_merge_1804_df = pd.merge(merged_1804_df, second_merge_1804_df, on='Country', how='inner')\n",
+    "final_merge_1804_df.head()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 22,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Country</th>\n",
+       "      <th>CO2 Emissions</th>\n",
+       "      <th>Birthrate</th>\n",
+       "      <th>Population</th>\n",
+       "      <th>Income</th>\n",
+       "      <th>Population Color</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>Canada</td>\n",
+       "      <td>0.00542</td>\n",
+       "      <td>5.72</td>\n",
+       "      <td>677000</td>\n",
+       "      <td>1350</td>\n",
+       "      <td>0.000487</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>France</td>\n",
+       "      <td>0.07330</td>\n",
+       "      <td>4.21</td>\n",
+       "      <td>29700000</td>\n",
+       "      <td>1820</td>\n",
+       "      <td>0.021367</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>Germany</td>\n",
+       "      <td>0.04330</td>\n",
+       "      <td>5.38</td>\n",
+       "      <td>23300000</td>\n",
+       "      <td>1690</td>\n",
+       "      <td>0.016763</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>Poland</td>\n",
+       "      <td>0.04730</td>\n",
+       "      <td>6.22</td>\n",
+       "      <td>9690000</td>\n",
+       "      <td>1230</td>\n",
+       "      <td>0.006971</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>United Kingdom</td>\n",
+       "      <td>2.34000</td>\n",
+       "      <td>5.65</td>\n",
+       "      <td>13000000</td>\n",
+       "      <td>3290</td>\n",
+       "      <td>0.009353</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "          Country  CO2 Emissions  Birthrate  Population  Income  \\\n",
+       "0          Canada        0.00542       5.72      677000    1350   \n",
+       "1          France        0.07330       4.21    29700000    1820   \n",
+       "2         Germany        0.04330       5.38    23300000    1690   \n",
+       "3          Poland        0.04730       6.22     9690000    1230   \n",
+       "4  United Kingdom        2.34000       5.65    13000000    3290   \n",
+       "\n",
+       "   Population Color  \n",
+       "0          0.000487  \n",
+       "1          0.021367  \n",
+       "2          0.016763  \n",
+       "3          0.006971  \n",
+       "4          0.009353  "
+      ]
+     },
+     "execution_count": 22,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "# Create a new population reference df for setting colors\n",
+    "\n",
+    "final_merge_1804_df['Population Color'] = final_merge_1804_df['Population']/max_pop\n",
+    "\n",
+    "final_merge_1804_df.head()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 23,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Create a variable to change the scaling of the bubbles for all charts at once. \n",
+    "# Note - will have to rerun each chart to update if this variable changes\n",
+    "\n",
+    "scale_variable = 100000"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 24,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "x_axis = final_merge_1804_df[\"CO2 Emissions\"]\n",
+    "y_axis = final_merge_1804_df[\"Birthrate\"]\n",
+    "\n",
+    "# s = [income for final_merge_1804_df[\"Income\"]] # - I believe this should work\n",
+    "\n",
+    "plt.xlabel(\"CO2 Emissions\")\n",
+    "plt.ylabel(\"Birthrate\")\n",
+    "plt.title(\"1804\")\n",
+    "plt.text(25, 9, r'Marker size = population', fontsize=8)\n",
+    "plt.text(25, 8, r'Marker color = per capita income', fontsize=8)\n",
+    "\n",
+    "plt.xlim(0,50)\n",
+    "plt.ylim(0,10)\n",
+    "\n",
+    "plt.grid(color='grey', linestyle='-', linewidth=0.25, alpha=0.5)\n",
+    "\n",
+    "plt.scatter(x_axis, y_axis, c=final_merge_1804_df['Income'],  \n",
+    "            alpha=0.5, s = final_merge_1804_df['Population']/scale_variable)\n",
+    "\n",
+    "plt.savefig(\"1804.png\", dpi=150)\n",
+    "\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 25,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "population_1804_df = population_df[[\"country\", \"1804\"]]\n",
+    "population_1834_df = population_df[[\"country\", \"1834\"]]\n",
+    "population_1864_df = population_df[[\"country\", \"1864\"]]\n",
+    "population_1894_df = population_df[[\"country\", \"1894\"]]\n",
+    "population_1924_df = population_df[[\"country\", \"1924\"]]\n",
+    "population_1954_df = population_df[[\"country\", \"1954\"]]\n",
+    "population_1984_df = population_df[[\"country\", \"1984\"]]\n",
+    "population_2014_df = population_df[[\"country\", \"2014\"]]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 26,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "income_1804_df = income_df[[\"country\", \"1804\"]]\n",
+    "income_1834_df = income_df[[\"country\", \"1834\"]]\n",
+    "income_1864_df = income_df[[\"country\", \"1864\"]]\n",
+    "income_1894_df = income_df[[\"country\", \"1894\"]]\n",
+    "income_1924_df = income_df[[\"country\", \"1924\"]]\n",
+    "income_1954_df = income_df[[\"country\", \"1954\"]]\n",
+    "income_1984_df = income_df[[\"country\", \"1984\"]]\n",
+    "income_2014_df = income_df[[\"country\", \"2014\"]]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 27,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "first_merge_1834_df = pd.merge(co2_1834_df, birthrate_1834_df, on='country', how='inner')\n",
+    "first_merge_1834_df = first_merge_1834_df.dropna()\n",
+    "first_merge_1834_df = first_merge_1834_df.rename(columns={\"country\": \"Country\", \"1834_x\": \"CO2 Emissions\", \"1834_y\": \"Birthrate\"})"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 28,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "second_merge_1834_df = pd.merge(population_1834_df, income_1834_df, on='country', how='inner')\n",
+    "second_merge_1834_df = second_merge_1834_df.dropna()\n",
+    "second_merge_1834_df = second_merge_1834_df.rename(columns={\"country\": \"Country\", \"1834_x\": \"Population\", \"1834_y\": \"Income\"})"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 29,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "11"
+      ]
+     },
+     "execution_count": 29,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "final_merge_1834_df = pd.merge(first_merge_1834_df, second_merge_1834_df, on='Country', how='inner')\n",
+    "\n",
+    "final_merge_1834_df.head()\n",
+    "len(final_merge_1834_df)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 30,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Country</th>\n",
+       "      <th>CO2 Emissions</th>\n",
+       "      <th>Birthrate</th>\n",
+       "      <th>Population</th>\n",
+       "      <th>Income</th>\n",
+       "      <th>Population Color</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>Austria</td>\n",
+       "      <td>0.16300</td>\n",
+       "      <td>5.10</td>\n",
+       "      <td>3610000</td>\n",
+       "      <td>2450</td>\n",
+       "      <td>0.002597</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>Belgium</td>\n",
+       "      <td>1.14000</td>\n",
+       "      <td>4.92</td>\n",
+       "      <td>3880000</td>\n",
+       "      <td>2630</td>\n",
+       "      <td>0.002791</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>Canada</td>\n",
+       "      <td>0.00263</td>\n",
+       "      <td>5.72</td>\n",
+       "      <td>1390000</td>\n",
+       "      <td>1750</td>\n",
+       "      <td>0.001000</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>France</td>\n",
+       "      <td>0.26400</td>\n",
+       "      <td>3.65</td>\n",
+       "      <td>33900000</td>\n",
+       "      <td>1880</td>\n",
+       "      <td>0.024388</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>Germany</td>\n",
+       "      <td>0.15100</td>\n",
+       "      <td>4.88</td>\n",
+       "      <td>29300000</td>\n",
+       "      <td>2050</td>\n",
+       "      <td>0.021079</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "   Country  CO2 Emissions  Birthrate  Population  Income  Population Color\n",
+       "0  Austria        0.16300       5.10     3610000    2450          0.002597\n",
+       "1  Belgium        1.14000       4.92     3880000    2630          0.002791\n",
+       "2   Canada        0.00263       5.72     1390000    1750          0.001000\n",
+       "3   France        0.26400       3.65    33900000    1880          0.024388\n",
+       "4  Germany        0.15100       4.88    29300000    2050          0.021079"
+      ]
+     },
+     "execution_count": 30,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "final_merge_1834_df['Population Color'] = final_merge_1834_df['Population']/max_pop\n",
+    "final_merge_1834_df.head()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 31,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "x_axis = final_merge_1834_df[\"CO2 Emissions\"]\n",
+    "y_axis = final_merge_1834_df[\"Birthrate\"]\n",
+    "\n",
+    "# s = [income for final_merge_1804_df[\"Income\"]] # - I believe this should work\n",
+    "\n",
+    "plt.xlabel(\"CO2 Emissions\")\n",
+    "plt.ylabel(\"Birthrate\")\n",
+    "plt.title(\"1834\")\n",
+    "plt.text(25, 9, r'Marker size = population', fontsize=8)\n",
+    "plt.text(25, 8, r'Marker color = per capita income', fontsize=8)\n",
+    "\n",
+    "plt.xlim(0,50)\n",
+    "plt.ylim(0,10)\n",
+    "\n",
+    "plt.grid(color='grey', linestyle='-', linewidth=0.25, alpha=0.5)\n",
+    "\n",
+    "plt.scatter(x_axis, y_axis, c=final_merge_1834_df['Income'],  \n",
+    "            alpha=0.5, s = final_merge_1834_df['Population']/scale_variable)\n",
+    "\n",
+    "plt.savefig(\"1834.png\", dpi=150)\n",
+    "\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 32,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "35"
+      ]
+     },
+     "execution_count": 32,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "first_merge_1864_df = pd.merge(co2_1864_df, birthrate_1864_df, on='country', how='inner')\n",
+    "first_merge_1864_df = first_merge_1864_df.dropna()\n",
+    "first_merge_1864_df = first_merge_1864_df.rename(columns={\"country\": \"Country\", \"1864_x\": \"CO2 Emissions\", \"1864_y\": \"Birthrate\"})\n",
+    "\n",
+    "second_merge_1864_df = pd.merge(population_1864_df, income_1864_df, on='country', how='inner')\n",
+    "second_merge_1864_df = second_merge_1864_df.dropna()\n",
+    "second_merge_1864_df = second_merge_1864_df.rename(columns={\"country\": \"Country\", \"1864_x\": \"Population\", \"1864_y\": \"Income\"})\n",
+    "\n",
+    "final_merge_1864_df = pd.merge(first_merge_1864_df, second_merge_1864_df, on='Country', how='inner')\n",
+    "\n",
+    "final_merge_1864_df.head()\n",
+    "len(final_merge_1864_df)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 33,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Country</th>\n",
+       "      <th>CO2 Emissions</th>\n",
+       "      <th>Birthrate</th>\n",
+       "      <th>Population</th>\n",
+       "      <th>Income</th>\n",
+       "      <th>Population Color</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>Armenia</td>\n",
+       "      <td>0.00258</td>\n",
+       "      <td>8.00</td>\n",
+       "      <td>618000</td>\n",
+       "      <td>610</td>\n",
+       "      <td>0.000445</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>Australia</td>\n",
+       "      <td>0.18400</td>\n",
+       "      <td>5.75</td>\n",
+       "      <td>1460000</td>\n",
+       "      <td>4800</td>\n",
+       "      <td>0.001050</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>Austria</td>\n",
+       "      <td>1.17000</td>\n",
+       "      <td>4.94</td>\n",
+       "      <td>4360000</td>\n",
+       "      <td>3300</td>\n",
+       "      <td>0.003137</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>Azerbaijan</td>\n",
+       "      <td>0.01160</td>\n",
+       "      <td>8.10</td>\n",
+       "      <td>1320000</td>\n",
+       "      <td>993</td>\n",
+       "      <td>0.000950</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>Belarus</td>\n",
+       "      <td>0.00676</td>\n",
+       "      <td>7.00</td>\n",
+       "      <td>3530000</td>\n",
+       "      <td>793</td>\n",
+       "      <td>0.002540</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "      Country  CO2 Emissions  Birthrate  Population  Income  Population Color\n",
+       "0     Armenia        0.00258       8.00      618000     610          0.000445\n",
+       "1   Australia        0.18400       5.75     1460000    4800          0.001050\n",
+       "2     Austria        1.17000       4.94     4360000    3300          0.003137\n",
+       "3  Azerbaijan        0.01160       8.10     1320000     993          0.000950\n",
+       "4     Belarus        0.00676       7.00     3530000     793          0.002540"
+      ]
+     },
+     "execution_count": 33,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "final_merge_1864_df['Population Color'] = final_merge_1864_df['Population']/max_pop\n",
+    "final_merge_1864_df.head()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 34,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "x_axis = final_merge_1864_df[\"CO2 Emissions\"]\n",
+    "y_axis = final_merge_1864_df[\"Birthrate\"]\n",
+    "\n",
+    "plt.xlabel(\"CO2 Emissions\")\n",
+    "plt.ylabel(\"Birthrate\")\n",
+    "plt.title(\"1864\")\n",
+    "plt.text(25, 9, r'Marker size = population', fontsize=8)\n",
+    "plt.text(25, 8, r'Marker color = per capita income', fontsize=8)\n",
+    "\n",
+    "plt.xlim(0,50)\n",
+    "plt.ylim(0,10)\n",
+    "\n",
+    "plt.grid(color='grey', linestyle='-', linewidth=0.25, alpha=0.5)\n",
+    "\n",
+    "plt.scatter(x_axis, y_axis, c=final_merge_1864_df['Income'],  \n",
+    "            alpha=0.5, s = final_merge_1864_df['Population']/scale_variable)\n",
+    "\n",
+    "plt.savefig(\"1864.png\", dpi=150)\n",
+    "\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 35,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "47"
+      ]
+     },
+     "execution_count": 35,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "first_merge_1894_df = pd.merge(co2_1894_df, birthrate_1894_df, on='country', how='inner')\n",
+    "first_merge_1894_df = first_merge_1894_df.dropna()\n",
+    "first_merge_1894_df = first_merge_1894_df.rename(columns={\"country\": \"Country\", \"1894_x\": \"CO2 Emissions\", \"1894_y\": \"Birthrate\"})\n",
+    "\n",
+    "second_merge_1894_df = pd.merge(population_1894_df, income_1894_df, on='country', how='inner')\n",
+    "second_merge_1894_df = second_merge_1894_df.dropna()\n",
+    "second_merge_1894_df = second_merge_1894_df.rename(columns={\"country\": \"Country\", \"1894_x\": \"Population\", \"1894_y\": \"Income\"})\n",
+    "\n",
+    "final_merge_1894_df = pd.merge(first_merge_1894_df, second_merge_1894_df, on='Country', how='inner')\n",
+    "\n",
+    "final_merge_1894_df.head()\n",
+    "len(final_merge_1894_df)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 36,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Country</th>\n",
+       "      <th>CO2 Emissions</th>\n",
+       "      <th>Birthrate</th>\n",
+       "      <th>Population</th>\n",
+       "      <th>Income</th>\n",
+       "      <th>Population Color</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>Argentina</td>\n",
+       "      <td>0.5150</td>\n",
+       "      <td>6.63</td>\n",
+       "      <td>3880000</td>\n",
+       "      <td>6420</td>\n",
+       "      <td>0.002791</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>Armenia</td>\n",
+       "      <td>0.0813</td>\n",
+       "      <td>8.10</td>\n",
+       "      <td>810000</td>\n",
+       "      <td>840</td>\n",
+       "      <td>0.000583</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>Australia</td>\n",
+       "      <td>1.2900</td>\n",
+       "      <td>4.13</td>\n",
+       "      <td>3390000</td>\n",
+       "      <td>6270</td>\n",
+       "      <td>0.002439</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>Austria</td>\n",
+       "      <td>3.2300</td>\n",
+       "      <td>4.34</td>\n",
+       "      <td>5620000</td>\n",
+       "      <td>5160</td>\n",
+       "      <td>0.004043</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>Azerbaijan</td>\n",
+       "      <td>0.3650</td>\n",
+       "      <td>8.10</td>\n",
+       "      <td>1740000</td>\n",
+       "      <td>1430</td>\n",
+       "      <td>0.001252</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "      Country  CO2 Emissions  Birthrate  Population  Income  Population Color\n",
+       "0   Argentina         0.5150       6.63     3880000    6420          0.002791\n",
+       "1     Armenia         0.0813       8.10      810000     840          0.000583\n",
+       "2   Australia         1.2900       4.13     3390000    6270          0.002439\n",
+       "3     Austria         3.2300       4.34     5620000    5160          0.004043\n",
+       "4  Azerbaijan         0.3650       8.10     1740000    1430          0.001252"
+      ]
+     },
+     "execution_count": 36,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "final_merge_1894_df['Population Color'] = final_merge_1894_df['Population']/max_pop\n",
+    "final_merge_1894_df.head()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 37,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEWCAYAAACJ0YulAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nOzdeZhU5Znw/+99Tq1dvXdDA93sKooLKGgguBBEo2KImSQqySRxYsYkM4zGmP3Nov4mxpnkN+OYN4nDGEczmmhG4xKNuBOXCAKKC0EQENn33rvWc+73jyqqG+iVpZuC+3NdfXXXqbM85+nuc9ezi6pijDHGADgDnQBjjDFHDgsKxhhj8iwoGGOMybOgYIwxJs+CgjHGmDwLCsYYY/IsKBhjjMmzoGAMICJzRWSJiCRF5O593rtcRFaISLOI/FVELuvwXlhE/l1ENotIvYj8UkSCnZz/eBFJiMi9/XA7xhwwCwrGZG0G/hm4q+NGEakF7gW+DpQC3wR+KyKDc7t8B5gMnAKcAJwBfL+T8/8CWHxYUm7MIWRBwRhAVf+gqo8Au/Z5qw5oUNUnNesJoBUYm3v/Y8DtqrpbVXcAtwNf7HgCEbkSaACeO6w3YcwhYEHBmO4tAVaIyGwRcXNVR0ngrdz7kvuiw+s6ESkDEJFS4Gbghn5MszEHLDDQCTDmSKaqnoj8BvgtEAFSwKdVtTW3y5PAdSLyAuAC1+a2FwGNwP8H/FpVN4gIxhzprKRgTDdEZCbwr8B0IAScB9wpIhNzu/wYeANYBvwFeARIA9tz+8wE/r2fk23MAbOgYEz3JgIvquoSVfVVdTGwiOzDHlWNq+pcVa1V1TFk2ySWqqpHNpCMAtaLyFbgG8AnReT1gbgRY3rDgoIxgIgERCRCtgrIFZGIiATI9hg6Z0/JQEROB84h16YgIrUiMkyypgA/AH6UO+08sg3SE3NfdwBPAB/tx1szpk+sTcGYrO/T/jAH+FvgJlW9UURuBB4UkRpgB3CLqj6d228s8BtgMLAB+M6e91S1DWjbc0IRaQESuV5KxhyRxBbZMcYYs4dVHxljjMk7bEFBRO4Ske0i8k6HbZUi8oyIvJf7XnG4rm+MMabvDmdJ4W7gon22fQd4TlWPJzu68zuH8frGGGP66LC2KYjIKOBxVT0l93olMF1Vt4jIUGCBqo47bAkwxhjTJ/3d+6hGVbcA5ALD4K52FJFrgGsAYrHYpHHjLHb4vg+A41hTkOVFO8uLdpYX7XzfZ9myZTtVdVBfjjtiu6Sq6jyy/byZNGmSLl26dIBTNPASiQQAkUhkgFMy8Cwv2lletLO8aJdIJIhGox/09bj+DqfbctVG5L5v7+frG2OM6UZ/B4XHgC/kfv4C8Gg/X98YY0w3DmeX1N8BrwLjRGSjiFwN3ApcICLvARfkXhtjjDlCHLY2BVWd08Vb5x+uaxpjjDk41kRvjDEmz4KCMcaYPAsKxhhj8iwoGGOMybOgYIwxJs+CgjHGmDwLCsYYY/IsKBhjjMmzoGCMMSbPgoIxxpg8CwrGHIQFCxYQCATYvj074e/ixYsREdatW9er488+++xDlpZly5bx61//+pCd73CbPn06mUym0/cWLFjA2rVrAZg/fz5PPPFEfybtmGZBwZiDNHHiRB59NDvh78MPP8zkyZN7ddyeBWH6ortjJk6cyNVXX93ncx6JOgaFiy66iFmzZg1wio4dFhSMOUgzZszgueeeA2D58uWcfPLJQPaT+3nnnceUKVO45ZZbALj77ru54oormDVrFm+99Vb+HNdeey33338/qspXv/pVZsyYwaxZs6ivr2fBggXMnj2bj33sYzz11FP5Yx5++GHOOussLrroIubPn8+CBQv4/ve/z2uvvcb06dOZPn06paWlbNiwgUWLFjF9+nSmTZvGf//3fx/QfU6YMIE5c+YwadIkFi9eDMC9997LlClTmDZtGm+++SYAU6ZM4ZprrmHy5Mk8/vjjwN4lounTp+913vnz53PeeecxefJkfvOb35BKpbj77ru54YYbuOGGG7j77ru588478/l07rnncumll9LY2Mi6deuYMWMGn/rUp5g0aRIbN248oHsz7Y7YldeMKRShUIhIJMLChQs56aST2Lp1KwDjxo1jwYIFiAgf+chHuP766wEoLy/ngQceyB9/3XXXMXXqVK688kr++Mc/MmLECH71q1/x5JNPcscddzB16lRSqRTz58/f67oPPfQQv//97xkyZAiqyqJFiwA466yzWLBgAU8++SSPPPIIw4cP50tf+hKPPfYYJSUlXHDBBXz2s58lFAoBsH79ej7/+c/vde7a2lruu+++vbZt2LCBV155hcbGRr785S/z6KOPcvvtt/PKK6+wadMm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\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "x_axis = final_merge_1894_df[\"CO2 Emissions\"]\n",
+    "y_axis = final_merge_1894_df[\"Birthrate\"]\n",
+    "\n",
+    "plt.xlabel(\"CO2 Emissions\")\n",
+    "plt.ylabel(\"Birthrate\")\n",
+    "plt.title(\"1894\")\n",
+    "plt.text(25, 9, r'Marker size = population', fontsize=8)\n",
+    "plt.text(25, 8, r'Marker color = per capita income', fontsize=8)\n",
+    "\n",
+    "plt.xlim(0,50)\n",
+    "plt.ylim(0,10)\n",
+    "\n",
+    "plt.grid(color='grey', linestyle='-', linewidth=0.25, alpha=0.5)\n",
+    "\n",
+    "plt.scatter(x_axis, y_axis, c=final_merge_1894_df['Income'],  \n",
+    "            alpha=0.5, s = final_merge_1894_df['Population']/scale_variable)\n",
+    "\n",
+    "plt.savefig(\"1894.png\", dpi=150)\n",
+    "\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 38,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "62"
+      ]
+     },
+     "execution_count": 38,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "first_merge_1924_df = pd.merge(co2_1924_df, birthrate_1924_df, on='country', how='inner')\n",
+    "first_merge_1924_df = first_merge_1924_df.dropna()\n",
+    "first_merge_1924_df = first_merge_1924_df.rename(columns={\"country\": \"Country\", \"1924_x\": \"CO2 Emissions\", \"1924_y\": \"Birthrate\"})\n",
+    "\n",
+    "second_merge_1924_df = pd.merge(population_1924_df, income_1924_df, on='country', how='inner')\n",
+    "second_merge_1924_df = second_merge_1924_df.dropna()\n",
+    "second_merge_1924_df = second_merge_1924_df.rename(columns={\"country\": \"Country\", \"1924_x\": \"Population\", \"1924_y\": \"Income\"})\n",
+    "\n",
+    "final_merge_1924_df = pd.merge(first_merge_1924_df, second_merge_1924_df, on='Country', how='inner')\n",
+    "\n",
+    "final_merge_1924_df.head()\n",
+    "len(final_merge_1924_df)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 39,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Country</th>\n",
+       "      <th>CO2 Emissions</th>\n",
+       "      <th>Birthrate</th>\n",
+       "      <th>Population</th>\n",
+       "      <th>Income</th>\n",
+       "      <th>Population Color</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>Algeria</td>\n",
+       "      <td>0.0046</td>\n",
+       "      <td>6.99</td>\n",
+       "      <td>6380000</td>\n",
+       "      <td>2600</td>\n",
+       "      <td>0.004590</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>Argentina</td>\n",
+       "      <td>1.0900</td>\n",
+       "      <td>4.57</td>\n",
+       "      <td>10100000</td>\n",
+       "      <td>7970</td>\n",
+       "      <td>0.007266</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>Armenia</td>\n",
+       "      <td>0.0887</td>\n",
+       "      <td>7.81</td>\n",
+       "      <td>1060000</td>\n",
+       "      <td>642</td>\n",
+       "      <td>0.000763</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>Australia</td>\n",
+       "      <td>4.6500</td>\n",
+       "      <td>2.97</td>\n",
+       "      <td>5830000</td>\n",
+       "      <td>8910</td>\n",
+       "      <td>0.004194</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>Austria</td>\n",
+       "      <td>3.0600</td>\n",
+       "      <td>2.99</td>\n",
+       "      <td>6560000</td>\n",
+       "      <td>6230</td>\n",
+       "      <td>0.004719</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "     Country  CO2 Emissions  Birthrate  Population  Income  Population Color\n",
+       "0    Algeria         0.0046       6.99     6380000    2600          0.004590\n",
+       "1  Argentina         1.0900       4.57    10100000    7970          0.007266\n",
+       "2    Armenia         0.0887       7.81     1060000     642          0.000763\n",
+       "3  Australia         4.6500       2.97     5830000    8910          0.004194\n",
+       "4    Austria         3.0600       2.99     6560000    6230          0.004719"
+      ]
+     },
+     "execution_count": 39,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "final_merge_1924_df['Population Color'] = final_merge_1924_df['Population']/max_pop\n",
+    "final_merge_1924_df.head()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 40,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "x_axis = final_merge_1924_df[\"CO2 Emissions\"]\n",
+    "y_axis = final_merge_1924_df[\"Birthrate\"]\n",
+    "\n",
+    "plt.xlabel(\"CO2 Emissions\")\n",
+    "plt.ylabel(\"Birthrate\")\n",
+    "plt.title(\"1924\")\n",
+    "plt.text(25, 9, r'Marker size = population', fontsize=8)\n",
+    "plt.text(25, 8, r'Marker color = per capita income', fontsize=8)\n",
+    "\n",
+    "plt.xlim(0,50)\n",
+    "plt.ylim(0,10)\n",
+    "\n",
+    "plt.grid(color='grey', linestyle='-', linewidth=0.25, alpha=0.5)\n",
+    "\n",
+    "plt.scatter(x_axis, y_axis, c=final_merge_1924_df['Income'],  \n",
+    "            alpha=0.5, s = final_merge_1924_df['Population']/scale_variable)\n",
+    "\n",
+    "plt.savefig(\"1924.png\", dpi=150)\n",
+    "\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 41,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "137"
+      ]
+     },
+     "execution_count": 41,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "first_merge_1954_df = pd.merge(co2_1954_df, birthrate_1954_df, on='country', how='inner')\n",
+    "first_merge_1954_df = first_merge_1954_df.dropna()\n",
+    "first_merge_1954_df = first_merge_1954_df.rename(columns={\"country\": \"Country\", \"1954_x\": \"CO2 Emissions\", \"1954_y\": \"Birthrate\"})\n",
+    "\n",
+    "second_merge_1954_df = pd.merge(population_1954_df, income_1954_df, on='country', how='inner')\n",
+    "second_merge_1954_df = second_merge_1954_df.dropna()\n",
+    "second_merge_1954_df = second_merge_1954_df.rename(columns={\"country\": \"Country\", \"1954_x\": \"Population\", \"1954_y\": \"Income\"})\n",
+    "\n",
+    "final_merge_1954_df = pd.merge(first_merge_1954_df, second_merge_1954_df, on='Country', how='inner')\n",
+    "\n",
+    "final_merge_1954_df.head()\n",
+    "len(final_merge_1954_df)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 42,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Country</th>\n",
+       "      <th>CO2 Emissions</th>\n",
+       "      <th>Birthrate</th>\n",
+       "      <th>Population</th>\n",
+       "      <th>Income</th>\n",
+       "      <th>Population Color</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>Afghanistan</td>\n",
+       "      <td>0.0131</td>\n",
+       "      <td>7.53</td>\n",
+       "      <td>8150000</td>\n",
+       "      <td>1130</td>\n",
+       "      <td>0.005863</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>Albania</td>\n",
+       "      <td>0.3630</td>\n",
+       "      <td>6.37</td>\n",
+       "      <td>1380000</td>\n",
+       "      <td>2150</td>\n",
+       "      <td>0.000993</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>Algeria</td>\n",
+       "      <td>0.4330</td>\n",
+       "      <td>7.41</td>\n",
+       "      <td>9610000</td>\n",
+       "      <td>4340</td>\n",
+       "      <td>0.006914</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>Angola</td>\n",
+       "      <td>0.0696</td>\n",
+       "      <td>7.20</td>\n",
+       "      <td>5000000</td>\n",
+       "      <td>3290</td>\n",
+       "      <td>0.003597</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>Argentina</td>\n",
+       "      <td>1.9800</td>\n",
+       "      <td>3.15</td>\n",
+       "      <td>18600000</td>\n",
+       "      <td>8180</td>\n",
+       "      <td>0.013381</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "       Country  CO2 Emissions  Birthrate  Population  Income  Population Color\n",
+       "0  Afghanistan         0.0131       7.53     8150000    1130          0.005863\n",
+       "1      Albania         0.3630       6.37     1380000    2150          0.000993\n",
+       "2      Algeria         0.4330       7.41     9610000    4340          0.006914\n",
+       "3       Angola         0.0696       7.20     5000000    3290          0.003597\n",
+       "4    Argentina         1.9800       3.15    18600000    8180          0.013381"
+      ]
+     },
+     "execution_count": 42,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "final_merge_1954_df['Population Color'] = final_merge_1954_df['Population']/max_pop\n",
+    "final_merge_1954_df.head()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 43,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEWCAYAAACJ0YulAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nOzdeZxcVZn4/8+599Ze1Xtn6XT2QEIIkJAQAwkkhMVgICDDT4zOACOKOIMoMsoMwyg6yjCj4w/1O6gMKvpFjSiyiJCgQEAxhNCYAFnJvnbS+1LrXZ7vH9Vd6U7vSa9w3q9Xk1TVXc69He5TZ3uOEhE0TdM0DcAY6gJomqZpw4cOCpqmaVqODgqapmlajg4KmqZpWo4OCpqmaVqODgqapmlajg4KmqZpWo4OCpoGKKVuU0q9oZRKK6UeOeGzTyqldiqlmpVSq5VSZW0+u1cpZbd81vozpZPj36iUEqXUJwfhcjTtpOmgoGlZh4GvAz9u+6ZSajFwH3A1UATsAX55wr6/EpFom5/dJxyjEPgXYPNAFV7T+osOCpoGiMhvReRJoOaEj64Cfi0im0UkA/w7cJFSamofDv8fwHeB6v4praYNHB0UNK17quWn7WuAWW3eu0opVauU2qyU+ky7nZWaD8wDfjCwxdS0/qGDgqZ171ngI0qps5VSIeDLgADhls8fA84ASoFPAV9WSq0EUEqZwIPAZ0XEG/SSa9pJ0EFB07ohIi8AXwEeB/YBe4Em4GDL51tE5LCIuCLyF+A7wHUtu/8D8JaIrBv0gmvaSdJBQdN6ICL/IyKnicgossHBAt7panOONzFdAnxYKVWplKoELgD+Wyn1fwa80Jp2kqyhLoCmDQdKKYvs/w8mYCqlgoDT8t40siOHxgMPAd8RkbqW/a4GXgHqgfOA24G7Ww57ExBsc5rfAr8BfjTAl6NpJ03XFDQt6x4gCfwz8Lctf7+H7EP9F0Az8DqwDvi3Nvt9FNhJtknpZ8B/ishPAUSkXkQqW3+ADNAoIg2Dc0ma1ndKL7KjaZqmtdI1BU3TNC1nwIKCUurHSqljSql32rxXpJT6g1Lq3ZY/Cwfq/JqmaVrfDWRN4RFg2Qnv/TPwgoicBrzQ8lrTNE0bJga0T0EpNQl4RkRmtbzeDiwRkSNKqbHAWhGZPmAF0DRN0/pksIekjhaRIwAtgWFUVxsqpW4BbgGIRCJzp0/XscPzspNiDUN3Bel7cZy+F8fpe3Gc53ls3LixWkRK+7LfsJ2nICIPkR0Tzty5c6WiomKISzT0UqkUAMFgsIct3/v0vThO34vj9L04LpVKEQqF9vV1v8EOp0dbmo1o+fPYIJ9f0zRN68ZgB4WngRtb/n4j8NQgn1/TNE3rxkAOSf0l2dmf05VSB5VSNwP3A5cppd4FLmt5rWmapg0TA9anICIru/jokoE6p6ZpmnZqdBe9pmmalqODgqZpmpajg4KmaZqWo4OCpmmalqODgqZpmpajg4KmaZqWo4OCpmmalqODgqZpmpajg4KmaZqWo4OCpmmalqODgqadgrVr12JZFseOZRP+btiwAaUUe/fu7dX+ixYt6reybNy4kR/96Ef9dryBtmTJEhzH6fSztWvXsnv3bgBWr17N73//+8Es2vuaDgqadopmz57NU09lE/4+8cQTzJs3r1f7tS4I0xfd7TN79mxuvvnmPh9zOGobFJYtW8by5cuHuETvHzooaNopWrp0KS+88AIAmzdv5swzzwSy39wXL17MggULuO+++wB45JFHuP7661m+fDlvvfVW7hi33347q1atQkT4zGc+w9KlS1m+fDl1dXWsXbuWFStWcNVVV7FmzZrcPk888QTz589n2bJlrF69mrVr13LPPffw+uuvs2TJEpYsWUJeXh4HDhxg/fr1LFmyhIULF/KTn/zkpK7znHPOYeXKlcydO5cNGzYA8Oijj7JgwQIWLlzIpk2bAFiwYAG33HIL8+bN45lnngHa14iWLFnS7rirV69m8eLFzJs3j5/97GdkMhkeeeQR7rzzTu68804eeeQRHn744dx9uuiii7jyyitpaGhg7969LF26lOuuu465c+dy8ODBk7o27bhhu/Kapo0Ufr+fYDDIa6+9xhlnnEFlZSUA06dPZ+3atSiluPjii7njjjsAKCgo4Fe/+lVu/8997nOcf/75fPSjH+V3v/sdEyZM4Pvf/z7PPfccP/jBDzj//PPJZDKsXr263Xkff/xxHnvsMcaMGYOIsH79egDmz5/P2rVree6553jyyScZP348n/zkJ3n66aeJxWJcdtllfPzjH8fv9wOwf/9+brjhhnbHHjduHD//+c/bvXfgwAFeffVVGhoa+PSnP81TTz3Fd7/7XV599VUOHTrEbbfdxjPPPENVVRX33HMPxcXFXH755Vx55ZXd3r+LLrqIZcuW4TgOS5Ys4YYbbuCmm25i0aJFXHrppTzyyCNAtmkuHo/zyiuv8Oijj/KDH/yA66+/nrq6Ov74xz/yy1/+kieffJLbbrutj79BrS0dFDStH3zoQx/i1ltv5aGHHuLBBx8EYM+ePdx5550kEgm2b9+e63eYO3dubr8dO3YQDAZ54IEHANi6dSurVq1izZo1OI7D+eefD8C5557b4Zz33HMPX//610mn09x1113tPtu9ezcPPPAATz/9NACbNm1ixYoVAFRXV1NVVcW4ceMAmDBhAmvXru3xGqdNm0Y0GiUajdLQ0EBVVRUTJ07E5/MxadIkGhoaACguLmbChAkAmKbZ7hgi0uG4FRUVfPWrX8W2bTZv3tzl+Xft2pW7D/PmzePll18GYObMmRiGwbhx49i2bVuP16F1TwcFTesHH/rQh1izZg3nnXde7r3vf//73HXXXSxZsoRFixblHohtF5U//fTTWblyJV/84hf51re+xfTp07nhhhu48847AbBtm1dffbXThegnTpzIww8/zEsvvcR3v/tdPvaxjwGQSCT49Kc/zY9//GMCgQAAc+bM4Te/+Q2RSATbtvH5fLnj9LamsHPnTuLxOA0NDeTl5VFaWsrevXuxbZtDhw6Rn58PQG1tLQcPHqSoqAjXdYFsMEin02zfvr3DdfzXf/0XDz/8MOPGjeO0004DwOfz5fZtNWXKFJ5//nkA3njjDaZOnQqAUiq3TWdBR+sbHRQ0rR9Eo9EOI3+WL1/ObbfdxsyZM3NNNZ25+eab+Y//+A/+8z//ky996UvcfvvtLF26FIDPf/7z5OXldbrfvffey2uvvUZTUxP33398EcPHH3+c7du383d/93cArFq1iq9+9ausWLECz/MoKiri8ccfz23f25rC+PHj+cQnPsHOnTt58MEHMU2T2267jQsvvBDDMPif//kfAEpKSrj33nvZuHEjX/7ylwFyzUHLli3rcNwPf/jDXH311cyePZvCwkIg2+9w9913s379+lytY/78+fz0pz/lwgsvJBaL8Ytf/IL6+voey631jRoJkXXu3LlSUVEx1MUYcqlUCoBgMDjEJRl6+l4cN1j3YtGiRfz5z3/ut+0Ggv53cVwqlSIUClWISO+Gw7XQo480TdO0HB0UNE3rld5++x+qWoLWP3RQ0DRN03J0UNA0TdNydFDQNE3TcnRQ0DRN03J0UNA0TdNydFDQNE3TcnRQ0DRN03J0UNA0TdNydFDQNE3TcnRQ0DRN03J0UNA0TdNydFDQNE3TcnRQ0LRTsHbtWizLyq2qtmHDBpRS7N27t1f7t127eKAMxjkG22c/+1kAnnzySWpra/u0j9Y9HRQ07RTNnj2bp556CoAnnniCefN6l77e87w+n+tk9hnK4w7Ueb73ve8BfQsKrfto3dNBQdNO0dKlS3nhhRcA2Lx5M2eeeSYAGzduZPHixSxYsID77rsPgEceeYTrr7+e5cuX89Zbb+WOcfvtt7Nq1SpEhM985jMsXbqU5cuXU1dXx9q1a1mxYgVXXXUVa9asye0Tj8e57rrruOyyy7jlllsAePTRR1mwYAELFy5k06ZN7cq5adMmFi5cyIIFC3j00UeB7Ipot912W6crovXk3nvv5aabbuLSSy/lE5/4BADJZJKVK1eydOlSrr/+emzb7vKaKysrueKKK1iyZAn/8i//AsBHPvIRFi9ezOWXX05jYyMA55xzDitXrmTu3Lls2LAByNZ+9u/fz+rVq/n4xz/ON7/5TVavXs1ll13GwoUL+dnPftahvK01ptbznXfeebnV8l599VUWLlzIxRdfzK9+9Sscx2HlypVcdNFFrFy5EsdxWLt2Lddccw1XX301ixYt4uc//zmXXHIJy5cvR0Q6/d2NSK0XM5g/wB3AZuAd4JdAsLvtzz33XNFEksmkJJPJoS7GsDBc7sVLL70k//qv/yo33nijrFu3Tu666y658cYbZc+ePZJIJMTzPBERWbJkiSQSCfnJT34it9xyS27/hQsXyu233y6/+MUvRETk6aeflvvuu09ERJ599lm577775KWXXpIPfvCDHc797W9/W374wx9KMpmUeDwujuPIeeedJ5lMRvbs2SPLly/PnUNE5KqrrpI9e/ZIJpOR+fPnSyaTkRtvvDF37ra++tWvyuLFi9v9PP/88+22+cpXviJf//rXRUTk1ltvlXXr1sl3v/vd3PEefPBB+cUvftHhmlvdfvvtsmbNGhERcV1XRETi8biIiPzv//6vPPTQQyIiUlhYKE1NTXLw4MEO13TjjTfKu+++m9s3mUxKU1NT7vO2Wt9bvHixvPnmm5JKpeTCCy8UEZFFixZJVVVVriyPPfaYfO1rXxMRkX//93+XVatWyUsvvSQrVqwQEZFvfOMbcvvtt4uIyKc+9SmpqKjo9Hc3lJLJpABvSB+fz4O+RrNSahxwOzBTRJJKqceAjwKPDHZZNK2/fOhDH+LWW2/loYce4sEHHwRgz5493HnnnSQSCbZv357rd5g7d25uvx07dhAMBnnggQcA2Lp1K6tWrWLNmjU4jsP5558PwLnnntvhnDt27OAf//EfATAMg6qqKiZOnIjP52PSpEk0NDS0276uro5JkyYBMHny5E7L0+rLX/5ybn3l7syZMwfINqHt3LmTrVu3UlFRwQ9/+ENSqRQrV64kPz+/03Ps2LGDb3zjG7nyu67LF7/4Rd5++20aGxv58Ic/DMC0adOIRqNEo9EO19RWRUUFX/nKV7Btm82bN3db7lmzZuHz+TCM440lJSUlubLs2rUrd8/nzZtHRUUFo0ePZtasWQCUlZVRWlqa+3tdXV2Xv7uRZtCDQpvzhpRSNhAGDne3sed5ubVX38/0PThuuNyLTCaD4zgsXbqUZ599lrPOOgvXdUmn03zve9/jjjvu4KKLLmLp0qWkUils28Z13Vz5p02bxnXXXccdd9zB/fffz+TJk1m5ciWf//znAbBtm3Xr1nX6/8CUKVP405/+RHl5OZ7nEYvF2L17N01NTRw+fJhYLEYqlcrtm5eXx/bt2ykrK2Pnzp3k5eXhui62bXc49n333cfatWvbvXfXXXdxySWX5F47jkNFRQVLly7lzTffZOXKlUyZMoULL7ww90C3bZtVq1a1u+ZWU6dO5ZVXXmHp0qV4nsfGjRtpbGzk+eef58c//jGHDx8mlUqxc+dOampqaGhoIBqNtrsmwzBIJBKkUinuv/9+HnjgAcaOHcu8efM6nK91H8/zSKfTuK6be09EOHToEMXFxXieR3l5OevXr+eSSy7htddeY8qUKWQymdx12LaN4zikUikcxyGdTnf6uxvKf6cne+5BDwoickgp9S1gP5AEnheR50/cTil1C3ALQHl5+eAWUtP6KBqN8oMf/KDde1dccQV33HEHM2bMwO/3d7nvTTfdxDe/+U2+9a1vceedd/KFL3wh18Z/2223kZeX1+l+n/jEJ7j55pt59NFHmTx5Mg8//DCf+cxnuOSSSzAMI1f7aPVv//Zv3Hjjjbiuy6233orP5+uyTHfffTd33313j9e9bds2rrjiCsrLy1mwYAHnnHMO//AP/8BDDz2EiPC1r32ty33/6Z/+iU996lPcf//9LFiwgC996Uvs2rWLFStWUF5eTllZGZD9///Tn/40u3fv7nBNl156KZ/73Oe49tprWbFiBR/72Mc466yzKCws7LHsbX3ta1/jb/7mbwgEAnzyk5/kmmuu4e///u+59NJLGTNmDHfeeSfr1q3r9hhXXnllh9/dlVde2adyDAdKsm38g3dCpQqBx4HrgXrg18BvROTRrvaZO3euVFRUDFIJh6/WyB8MBoe4JENP34vjhupe3HvvvSxatIhLL710QM+zaNGiXq/7rP9dHJdKpQiFQhUi0rvhcC2GYvTRpcAeEakSERv4LXDBEJRD0zRNO8FQ9CnsBxYopcJkm48uAd4YgnJomnYK7r333kE5T29rCVr/GPSagoisB34DvAm83VKGh7rbp6aynv/65A/51befoaayjsFu8tI0TXu/GPQ+hZNR4CuRC/OvxjAM/AEfsxZMY+yUUeQVRSkcU8D408soKS+ieGwhpmUOdXEHjG4vPU7fi+P0vThO34vjTrZPYaiGpPaJUgqFQkRwXJd9Ow6TXxLDyThU7q1i08tbMJRCGYoxk0Yx8cxyppw1gbFTRqOUGuria5qmjRgjIiiIgOsJCsHJuKQiNpUHaph53tR223muR2NNE+ufqeAvT22guKyID3xoDqedO4VAqOshgZqmaVrWyAgKCK7tgso2dcUbEux++wDl00aTVxjNbWeYBpH8MJH8MCJCojHJsz96Ed/PXmH20lmcdeEMSsqKhuoyNE3Thr0RERSQlv8ImKaBUtmcTVs27GbOhTM6rQUopXIBws44vPnHt9iw+q9MmDGORdd+gPLTxg76ZWiapg13IyNLqgJRClHgeYJjuyhDkU5kOLSnqsfdfX6L0vJiRk8spepgDT//xm/5w6OvkIwPj1QJmqZpw8XIqCkAoACF67l4SYeE5+HZLg3HGvD7DMZNG9Njp7JSivySPGKFUTat3cyODbv44N9fzNRzJuoOaU3TNEZKTaGFALgehmWgTAM77YDAnrcPcOxATa+PY5gGo8aXYPpMHv//n+GZH/6BRFNywMqtaZo2UoyMoCC0DEFyQcCyTJTKDlFNpzIEIn4ObD/c50lt4ViI0ZNGsb1iN49+/XGqD/duBSdN07T3qpERFCAbEDwBhEzaxk7Z2KkMTsah+lAtdUcbqDlS1+fl/gxDMaq8mHQizf/96m/Y/da+gSm/pmnaCDByggK0dCsYSOtoJKWwfCbxphSJxiTbN+yk4g9vcWhnJelkpk+Hzi/JI5wX4tf//TveemXLQJRe0zRt2Bs5Hc1KZYOC64FSuK7gD5gYpsK1PWKjI0QLoji2w74tB9m39SAlZUWMmVxKrDDaq47kUDSI6TN59uEX8VyP2RfPGpBLcRyXV1/eTlFxhLNmTxyQc2iapp2MERUUlGEgysg2JSlwHRcRUIbCCgbwPMHyWVj5FuIJtZX1VB+qIa8oxtTZkwhFe86H4g/4KC0vYvVP1mJaJmddeEa/X0rV0UZefnELkUiQWedM0COfNE0bNkZMUBBDoUwDwzAQ/Ijj4ImHGfCBQENzhkTGIxL2EQ75sCyDUDSIiBBvTLBx7TtMmjme0ZNGYRjdP4R9AR8l5UU896MXySuOMXFm/678NmpMPldcNYeCwrAOCJqmDSsjq0/BMLI/poHyWSifD08Uhmng91soQ9EUz3CsOkEiaQPZuQnBSJBAKMDut/ez5S/bSTb3PGnNH/CRVxLjie89R21lfb9ehmkanLdgKqdN17OqNU0bXkZGUBBBbAcvmcJzXXBccD1EBM/1kJYMqYZS+CwTw1DU1qeIJ453NpuWSSQ/nK01vPQOlXuP9TiENRwLYZiKJ777rJ79rGna+8LICArQmioVSaYQxwHPy772PMSwcN3jD3jDUFiWQX1DmnTGzb2fqzWEA+zcuLdXcxsKSvOpPVrPn3+7vl8vx/OEpsT7O9CICO+s30lTfXyoi6JpWouRExRaRx+JgGmCZWWbkpSB47gkTxiC2rq+QlNzusOhWmsNB7YdYu/mAz0GhtJxxbz5x3c4uONwv13OX97ew389+iK7DlX32zFHGjvjsOlP26k+VDfURdE0rcXICAqtfbFKZWc3uw4KQZkGWCZ4Humk3WHimmko0mkX2+k4oc0wDCL5EQ7trGTfloPdBgbDNIgWRnj2Ry+SSdv9ckl5kSCFsTDhwPt3nQd/wMfKL1zB5DP7tyNf07STNzKCQivJzmim9b/KyI7eUQrPcTu0+6uW2kVrp/OJlKGygeHdSg69e6TbwBArjNBQ1cj637/ZL5dy9rQyvrByCWNL8vrleCOVYYysf4Ka9l438v6PbGkyOl59oKUGISSbM7QGjVamYZBOO90cThHOC7Fv68EeRxkVlxWx7ncVHDvw/m3y0TTtvW1kBIXWhHiA8vlQhsq9zn4uKPEQ8XAdt8PuPaVDMkyDQDjIrk17u20esnwmvoBJxfObTuYqNE3Thr2RERQUYJqoYCDbjyBt3hcBJ1sTEA8yndQKejM/zOe3cB2Pve/s77YZqWBUAZvX7SDekOj7dWiapg1zIyQoKAyfhaJtDUEQx83+ZDsYUAi23b6mICI9zmBuFYoGqTpY220zkmkaiCdsXf9udp5E/Gd46ZdP7ro0TdOGmZERFICWasHxl22alIDj3+5P+JbviRAO9S6bh1KKQDjQYzNSfkkeG1ZvxHU9UCZg9vIawHU9Eok0TifNXJqmaUNtxOQ+ykaBlm/8J3zxV5aVbSNybDyvfaBQKEJBX6/P4vNbJBptDmw7xNRzJnW6TTASoHLPMQ5sO8TkWR/v1XEzGYc33tjDGxt2k0rbmIbB2edMYMGCqcRioV6XT9M0bSCNoKCg2nQOtA5NbXnPbKnwGAau42GnbXwBH47rEQn7e9181CoYDVC5r5pwaQE1tUlSaQelFHmxAKNHx4jFAgSjQd54/i0mz5rQ4/EyGYdf//p1DhyoobgoSn5+GMdx2bhxL7t2HuXjf3uBDgyapg0LI6j5SLJNQ9K2l5lsXiTHaelbECzTIBlPk8nYmKZBLNL7WkIr24PaDGzdepR0xsHnMzBNRV1Dki1bj7J5y1GCsRB739lP3bGGHo+3deth9u+vYczofPz+bBy2LJNRpfk0NSd5bd3OPpdR0zRtIIycoCDS/qctz2tZv1myw1UVpBMZivMDmGbfLjHteFQ3u1iWid2cxOczMQwD0zQIBX1EIn7iiQzbd1ThuB5Hdh/t8ZgVFXvIzwt1mia7qDDKW28f6NBBrmmaNhRGUFA44e+tgaElJVJueGrLA9znOX3ObCoi1CVcDJX9Ju84LulEx2U9wyEfyaRNfbPNgW0950NqbkoRCHTeUmdZJp4rZDJdT7DTNE0bLCMnKAC5yKBa/t4SGEQpxHaxTIOID8JWtsO4uS7eY7K7ttKO4HrZnEmQne3cVNfc6bbBoEVj3Gb3O/t7PG5RcbRDwr5WmYyDz28S7ENnuKZp2kAZIUFBHU+Gd8LbiEAmA3j4fAatfcqGoXBdj3QXD+POJDJeu4luls8kFU/juR2nRJumAYbiyIHaHhftmTdvMk1NqXYjoyBbM6mtbWbe3Ml9bubSNE0bCCPjSdTaZ2C0BIeWACHpDJJIgQimZWJZ7S9HKdWnoODJiaNds6/sLpp2WmNS9aHabo97+uljOfuc8VQeraepKYnjuCQSaSorGxhXXsR586f0uoyapmkDacQMSZV0GtJtk+CRCxDKUJg+s8O3bcM0+hQUukqHYadtAqHOUlxnd6g+XMv46WVdHtcwFFdcMZupU0fzxoY9VNc0EYsFWXbF2cycOS43IknTNG2ojaCn0QlP7NzIVIVSCtMwsMz22xiGwunDqJ6ApUjZ0m5+sjKytY1oQaT96Vv6KiKRAPXHGns8tmEoZswoY8aMroOHpmnaUBuS5iOlVIFS6jdKqW1Kqa1KqfN73ol2tYPs13oBz8MTwbKMTod8dhi+2o2Qz2jJwt1maU/TINNJbSOddsjPDxKJBmio7jkoaJqmjQRD1afwHWC1iMwAzgG29ryL6qR9J/taPA87memQNlsEVB8WcTENRTRgYHuSCwyttY22nc2O4+G6wvjyAnwBi6aazkcoaZqmjTSD3nyklMoDLgJuAhCRDNBtw79SYAZaHu5tM120MCyF6Yd0Ok3QF8Sysg1AnusRDAb6kq+OWMTAM4RkRjCUYCgwfOB6DphmbsGe004vJhS1sFMZmhqaSKX6NifiZAzGOUYKfS+O0/fiOH0vjjvZezEUNYUpQBXwE6XUX5VSDyulIidupJS6RSn1hlLqjYykOx4lV2kQlAKjpUkp1ZzCbVlVx3M9/L3MkHr8sIr8kElhxMQyFI4HrkAymSGVdigpiTDzjNEUFIZby4nXhyYqTdO04WwoOpot4FzgsyKyXin1HeCfgX9ru5GIPAQ8BJBvFoubbmm+aVNTEPGyzUOeh2N4GIaB5wqJuhThWBAvI/h9AehDBgnHcXEdD9NQFAYMPFHEm2ymjC+mZEw+Pl/7aoenBOU6BIPBk7oZJ2MwzzXc6XtxnL4Xx+l7cfKGIigcBA6KyPqW178hGxR6r3Vis2miTBNps9SCYRq4rkcykSYSC+Hr5XBPx3apr24i1SathS9gUlAcw2dAKGh1CAiQ7ZQ2rZEx3UPTNK0nvXqaKaVGK6V+pJR6ruX1TKXUzSdzQhGpBA4opaa3vHUJsKX3B2j50zRycxRQ2WaeXHkNRSbpECvs0CrVKcdxqTpcRzqZwfKb+AIWlt/EdTyqDteTSTvZ83TCczx8AZ2iQtO094befsV9BFgDtA6y3wF8/hTO+1ng50qpt4DZwH293lORDQiGgfJZxwMDx4eSiiv4fNlEc73RXJ/AdV0sv5Ub1qqUwrRMDFPR3JA8cZZEjp1xyCuO5V6LCPt3HmXrm3tprIv3+rI0TdOGg942H5WIyGNKqX8BEBFHKXXSuZ5FZCMwr887KqB1iKlSoAyEttkvFJ4rGKZBIOwn3pAgktf94jUiQrwxiWV1fisM0yCTskmnOl+e08nY7YLCa398hz8/+xaGoQiG/az87OUUjcrr8/HEr1EAACAASURBVKVqmqYNhd7WFOJKqWJaGm+UUguAnleX6U+qNWN2yxwC8QBB+SyUobDMbAI8ZSgieSFMn0km7fSYJVVa5iR01TzUmpC1q34DO+2QX5p96Huex2t/2ExpWQGjy4tIJzNs37jv5K9Z0zRtkPW2pvAF4GlgqlLqVaAU+P8GrFSdUNmpxuC5YJpgGqiCKIahMJvieK7g81sEI4F2D3gn4+LrYi0DyPY/GIaB52VHL53IdT1MyyAU6Xo0Q9GYglwZAyEfdtrBbOnwDoR0f4OmaSNHb2sKm4HFwAXAp4EzgW0DVajOiOdhGArDNDB9JlYshOk4mA3NGApCsSChWLDDN37X7b6VSylFtCCEm+l8OyeT7bAORbsOCqXlRbljLf/4BSQTaaqO1DNh2mjOPE9nQNU0beTobU1hnYicSzY4AKCUepPsfIPBYShEKXx+H4ZhYGQcLJ+Jr6WpqCu9mVcWzQuTbM6QSdlYfgvDUIgIru0iApNmlne6n2M7+AJWrvkIYOLpY/n0l68hnbSJ5oc6rX1omqYNV90GBaXUGGAcEFJKzeH41LE8IDzAZcsxDEU4GsLzsnMCInnhDklTu9JVOux2xzcNSssKaKpPEG9MYjsCAuFYENNSFI3O73S/RGOScaeN7fDgDwT9BIKdpdrWNE0b3nqqKXyQbI6icuDbbd5vAu4eoDJ11Joe21S4fVzg3rR6l/jIMA3yi6PkFUXw3JaZ0uLRXJ/osk8iFU8zsYtahKZp2kjUbVAQkZ8CP1VK/Y2IPD5IZeq6PEjvvvqTHaWkUFjdNC11Jjs/waC5IUnNkTp8AR8b/7yDssmjGH/a6HbpuUWEMZNG9en4mqZpw1mv+hRE5HGl1HKyHczBNu9/baAKdkIBEFoS3AV8nTYdea6XHZJKtnbgeR6+oNX5GgsdDi8kkjbpjEck7EMch7pjjSilKC4rwh/yc+DdSoJhP6NaOpVT8TTRgghl08b077VqmqYNoV4FBaXUD8j2IVwMPAxcB7w+gOVqx5PsJDHLZxEIB9p9Jp6QiKfbNyspsEyDggnRXh0/nXGpb8ygFKTSDn7PBrJDXAPhAEopgmEfR/ZW5YJCQ3UjS1cu7LAEqKZp2kjW2yfaBSJyA1AnIl8FzgfGD1yx2lNAIBwgUhBuP+RUhHhTCtdxMS0j96OUIpNxsbsYZnoiz8s2TWVHHYHrCZ7rESuOtUl7kZ13AOQmyc34wGn9famapmlDqrdBoXW1hoRSqgywgckDU6SOTMsgFA12aAqyM9kV0dp+WxcRxBNCUT9NDUk8zzvxcB0EAybhgA8RyIv5iUSDeJ4QakmRIQipRJrSskIA6o/Vc+b5p2dHQWmapr2H9Haewu+UUgXAN4E3yWac+N8BK9WJuugXsDMds5eKlw0i/qAfO+OQSdkET2hyOpFhKIoKj09OizfYlIwrakmjnc15lFccZeykUkQEO+0y++JZp3ZNmqZpw1CPQUEpZQAviEg98LhS6hkgKCKDm/uoEyfmNfI8AYRQNIRSCtXJNj2xMw6Wz+KcJWdipx2S8RSBkJ9YYQSlFPGGBKXlRYyZrEcdaZr23tNj85GIeMB/t3mdHg4BAcDymbmHvud62QlneSEM06BlAGuvF9mBbABJx1NMPWcigZCfaEGY0nFF5BVFUSo7y7mxpon5V8zp1agmTdO0kaa3fQrPK6X+Rg2zJ6HP78ulo1BKEc4L5iar2RmXUDiA5et9UEg2JSkpL6ZobGGnn9dXNVI2bYzuYNY07T2rL1lSI4CjlEpBa8uMDNlCAeIJruviD/jw3OycBMguq+l5Hv6AReGoWA9HOc7OOJiWyeRZEzqtBTi2QyaZYdnfX6yHoWqa9p7V28lrvX+6DgQRHNvNTmITAbJpL6L5YSJ5IQxDEW9KkU5msuspxIIEW+YX9IbneaTjaWbMn4o/2Hmq6+pDtSy6Zj6l5cX9eGGapmnDS6/bVpRS44CJbfcRkVcGolAdzt2yipkyDPwBC1/Ah89vtktEl1cYgV6uydyWeEKiIcH4GeVdNhs11TZTNLaQ866Yc9LXoGmaNhL0dkbzfwLXA1uA1hlhAgxKULAsk+KWhWz6k4gQb0hQNm0M46eP7bRmkUnbJJqSfPj2K/rUaa1pmjYS9fYpdw0wXUTSA1mYweR5HomGBGOnjGbSmeM7DQie61FzsJZln7iYsqk6x5Gmae99vQ0KuwEf8J4ICq7jkmxKUj69jAkzxnUaEESEYweqOffyszl78cwhKKWmadrg62mRne+RbSZKABuVUi/QJjCIyO0DW7zeszMO6ZSNYSiC4QCG0fmDPp1I47keU86ZxJhJpV0GhKoD1Uw8czwXX3+BnpOgadr7Rk81hTda/qwAnj7hs75NFT5Fnie4tgOA6WvfyZxO2VRXNmRHJgn4gylKxuS3Cwyu45JsThIrijFt9iTCsVCn5xERqg7WUDZtLNf847I+zXPoL+mUzYFdx0glM0SiQcZPHdXndSE0TdNORm8W2UEp9TkR+U7bz5RSnxvIgrXluh5HdlcinrSem0hBhFhhBNMyaaxLoBT4Wh7gmZRNOpUhFA60qx1MmjWRsZNLu1w3WUQ4tr+a8dPLuOazVxAIDe6SmiLCxr/s5E+r38K23VzYDUUCXHbtXMZPKxnU8mia9v7T21lYN3by3k39WI5uuY4LCmxHSGc8bMejqbaJo/urcW0nu8pa2yYelR1qmmxOkWhMEoqFOGfJmYybOrrLgOA6LpV7jjFtzmQ+fPuHekyiNxA2vbaLPz5RQSw/zOiyQkaPy/74AxZP/exV9r1bOehl0jTt/aWnPoWVwMeAKUqpts1HMaBmIAt2QjlIpVzEE5ShsG0XV4HTmCTRmKSorJBMygMRXFcQ18OxHUaNK2LMlNG53EVdSSfS1B6pZ+G18zn/qnlDMmM5k3H40+q3KR6d32HoazDkJ5Yf5tU1bzNh2uhBL5umae8fPTWY/wU4ApTQJike0AS8NVCF6oznCaaZfbCLZB+iPp+J67rUH6snVhTDzrj4AxZTzxrPuGljemz+ERFqj9QjCNd8dhnTz5s2GJfSqUN7qrDTDv7izn8l4WiAY5W11BxrpHxi5/0hmqZpp6qnPoV9SqmDQFxEXh6kMnVSDlpSXQhKZZt6sovpZJuJDGUw/vSxjBpfQn5xrCVLavdS8TS1lfVMmzOJS//2IgpKhyyNE5DtXO6u7741FXgm7QxamSAbOFNpB9fzWgKzgd9n4rN0x7emvRf1OLRGRFylVEIplT9UKbMNQ5FfGCaRyOC5QjDsx0ll8AUs7IxLfmmMqWdNxOrFjGPPE2oO12L5La7+xw8yY/60YTHkNJoX6nY4l4jgeUIkNrB9HemMw8HKeo5WN7LvcC2HKutJ2Q4tq1PktisuiDBhbBHjywoZU5JHSct6E5qmjWy9HW+ZAt5WSv0BiLe+OVjzFCyfyajxxVTuq8bOuIwaV4TruDTXxzEMh9PPndJjQLAzDvXHGnAdjzMvOJ0lH7mASP7wWU6zbGIx+YUR4k0pIrFgh8/ra5oZP62U/MLogJy/pj7Oxq0HqXhnPxk7m8kkHPIRiQQosNrfp2ztwebtHYd5c8sBAMrHFLBg9iSmTijVtQhNG8F6GxR+3/IzbIRjIQIhP3baYfSkzldBExESjUma6+NYfou5l53NrEUzKCkrGuTS9swwDD543Xn8+uGXcR2XWEEYpRSeJ9TXNKEMxaLLz+r389Y2JHj+z1vYua8aQykK88P4epgToZQiFPQTCmb7bESE2oY4v1n9V4J+H0s+cBpzzhyP2cVIL03Thq/eps7+6UAXpNvzA6AYNb4Yz/WwfBae65FoSjJt9qQOo4Vcx6W+qgE77VJaXsRF1y1g2pzJgz7voK/GTx3FR2+9mJd//xZH9lWjDIUnwtQzyrhw2dlE8vuv/J4n/HXrAdb8aSuGUowuiZ10849SirxoiLxoiHTG4dmXN7NlZyVXXjyLooK+Z67VNG3oqO7WMFZKPSYiH1FKvU0nvaAicvZAFq7VqOhYuXb632VnFyuFk3FAwcSZ4xk7uZR0IkOiKYmTcVBKYZgGM+ZPY87SWbm1lDMpG3/QNyLavUWEhro46aRNOBog1tLMlUqlAAgGOzYv9UVjc5KnXnibPQeqKSmK4u/nWdsiQm19HNcTll14BnNmdp5w8FT01714L9D34jh9L45LpVKEQqEKEZnXl/16ehq0zlq+8uSK1T98AYuC0nyaGxKAkF8So7BlPH/VgRqKxhZy1qIZlJ9eRkl5EYWjC3K1h8a6OE//5BWOHqwlrzDCNTcvprSs83UThgulFAVFA9N3UFsf5+dPbyCezDB2VP6ABEmlFMWFUTK2w+9efIemeJqLzhseHfqapnWvpyGpR1r+3Nf6nlKqBKiR7qoY/Sy/JMbKf74GZSgMwyAYDRJPZdi85QjLVsyhqKTr4aTP/+o1ao42MLq8iMa6OE/+aC2fvOea9+UDqq4xwc+efB3bcSgZoKDTlt9nMbo0j7Wvv4uIsHj+ae/L+65pI0m3PYFKqQVKqbVKqd8qpeYopd4B3gGOKqWWncqJlVKmUuqvSqlneto2FM2mqTj7opnMWjSDabMnUbF2G2t+9CJ/fXlbt/sePVhLflG2XTuvMEJjbYJMyj6Vog8bruuRyTh4Xs/xOZ7M8POnN5CxHQrzB6+d3zINxpTk8fKGnWx4e1/PO2iaNqR6aj76P8DdQD7wInCFiLymlJoB/BJYfQrn/hywFTipWWPJ6kamTR1FQ2Vdt9tNPH0s2zfuo3h0Hg21cUaVF3a5DnNX0imbl1/YwoSJJcyYNQ7P87KTyYbgW6/nCfv2V1Px5j7e3XkUyOZ9mjF9LHNmT2RcWWGHtOEiwh//so2GpiSju6lVDRTTNBhVHOMPr25j0rhiRhUP7ZLfmqZ1raegYInI8wBKqa+JyGsAIrLtVB6ISqlyYDnwDeALPW3veV6uA6nV5Tcu5N2/7mX2RWd0+KytRVeehePaHNh1lDETC7n42nmk031bK+jA/mpeeKYCv+dRUhQmk3YwDEWsIMzZC07jtLPHE8kb+NQTDQ1NvPDSFvbuqyPg91FcFMJQCk88drx7iHc272P69DIuWzoTf5t5Gzv3V7Fx815Gl+bhuUNTSzIV+Ex48vk3+dhV87BOcS5Dd7/z9xt9L47T9+K4k70XPQUFr83fkyd8dip9Cg8AXyKbWK9TSqlbgFsAysvLc+83NiTY/Nd9vLv1CAD+zYeY5be67JgNhgMsW3n+SRe0cn8NL/92A/6MTSQWIFYQxjANRMBO2bz63CZeXf0WM+dNYuEVs/EHBmb9Bdf1+MMLmzlwoIbRpYXtaimGMigqiCAibN9+GES44oNnYxiKeDLDmle2kB8LYwxxe35BXojKqkbe2LyfBedMHtKyaJrWuZ6eYOcopRoBBYRa/k7L65Ma86WUuhI4JiIVSqklXW0nIg8BDwHMnTtXgsEglYfreOwnr2LbLnn52W/mb204wDtvHuK6Gy6gfGL/rjewZ9thnnj4FUJhP6d3MqzSF/ERjoRxXY8tr++noSrJNZ9cTHAA5kNs33GEfQfqGVNaiGl1ffyxY4rZ/m4V585pZvKkUl5/+yDJjDCmdHjM3i4tKWDdX/dz3tlTifTDfdJDD4/T9+I4fS9OXrcdzSJiikieiMRExGr5e+vrvjXMH7cQWKGU2gusApYqpR7taSfX9fjdr17PprwYk08w5CcY8lM6Jp9Q2M/Tq9Zj2/2XLO7owVqe+tHLxPJDudnFXTFNg1HjCji8t4pnH/0Lrut1ue3JEBHWb9hDJBzosR+jdbbxGxV7sR2X1zftpahgeAQEAJ9l4nnC1l16bQhNG44GPQ+BiPyLiJSLyCTgo8CLIvK3Pe13aF8NDfUJYp203YcjARLxDPt2VfVbOdc+9SaW3yIU6V0COqUUpWUF7Np8kP07+veB19yc5vDhOmK9LEt+Xojde46x5d0jpNJ2v09OO1WxWJB1f93Tq1FTmqYNrhGTnKapMUlPUyMa6uLdft5bNZUNHNx1NDeUtbeUUoSjASpe3tov5WiVztgYRu9HOxmGAqVY99c9hIdgBbmehIN+GpqS7D9SO9RF0TTtBEP6FVJE1gJre7NtIOhrSd/c5dEI9dMD8J3Xd2EYikzaIZm0iSfSZNIOngiGUgQCPiIRP6GwH5/PbPewziuMsG9HJbXHGika1T/DP32WSV+mCooIruNytKaRstEF/VKG/mYYin2Hapk0rnioi6JpWhvDq12hGxMml+APWKRTNqapiDckiOSFsfwWdsbBNE0mn9Z5ttS+aGpM8pcXt3LwQC2y5/iKo7mx/wJemyd0IGBRNq6QkpJoLkAoQ1FT2dBvQSEWC5GXFyKRtAmHeu7KicfTRGJBmpU7bGcQh4I+9h3SNQVNG25GTFDwB3xctmIOT/9yPYe27MdOZgjnhZh87hTi8TRXXHNuu5pC1aFa9u84QjDkZ8qs8YSi3Y9GaG5M8sofNrN103727qkiEPAR6MUkN9t22bO7ir17qhg9Jp8J44uyy4Wm+28+gGEoFsyfwurnN/YqKDQ1pzjj7HLe2T18O3PDQT+HjzXgedJhsp2maUNnxAQFgDPOKscyFN/54m48oPZoIzNDPq64di5Tp4/NbffOuh2s/r9/RqnsUp7RgjAf/cJyCko6TosQEbZvPsgfntqI47gUj8ojGPIjXu9GEPl8Jgqw0w4H99dQXdVESUEYq4c1CfrqjBllvPb6u9TXJygqzu9yu+raZsaMzsczwO8fvovdmKaB53nUNyZ0em1NG0ZGVFAAOO3McdxwxzLW//Edzjr/NC5acS5Gm8VcMimbFx9bT+GovFw6i+pDdby+ZhOXf3wRqUSGqiP1hKIBCooi/PGZTbz9xl4KiiNY/hBb3j3Csfo4djxNLD9McTfLTIoIDdXNNNfHaV2tMhmwaKhLsG3zYU47e3y7sp2KYNDHtVefy2+frKCysoGCwjDBwPFaQzKVob4+QWlpHtddex5PvfT28F8BTUGyH2tUmqaduhEXFADmX3YW8y/rfBWypvo4ju3gb/PAjBSEObT7GFs37uf532zA8wTHcUnZLv6QnzHjsvmCdu+ror4hQdHoPKr31hBPpPH7TfKinaewiDcmaaqL4wtYKKUQETJJm6BpsG3zIWLPvc2SK87qt8CQnx/mox/5ADvereb1N3bT2JAElZ1aHosGuPzSWZw5cxzBoA/HcYd8BnPPVL/P6dA07dSMyKDQmVQyw7tbD7Phle1seesA5tYjhCMBxpQXoVyXM+ZP5blfvU5+URh/wGLn9kr27a7itDPH5dq0G5tSBPwWPsvE9Ju4rkc60/WEuOb6OGab0UfZJHlgKkVJaZQ3/rKTYMjPBUvPQEQQ4ZTbz0MhPx+YP4V5cydRU9OMbbv4/SZFRdEOK9Bpmqb11XsiKOzYfJDnHq/AzrgEgiaTZ09k76Z9NNc7bKtqxB8OUHbWRDzPIxD0UV3VyLHKBgqLIlRXNjBhanbUUiTsp7k6jc9nkVca49i+GmKxrjuoPVfa1QJcx8XyWQTCfkRg1Nh8XnzuLfYfredgZT2O41FQEGb+vCnMPKOMYB+ztbZlmgajuhnd5PNZ7UZJDUvCKSfG0zStf434oLBl036eWbUeU0HNoVoaq5pAgRkIYGdsRk0uYdz0sWzbfBg7kaGwJMauHUeznckiWG2+XU8sL6axOUVzPA0+k+Kx+RgZF8/zOm0CCkUCJJqSWH4fruMiIhSUxAiEfPiDPmrr4uw5UM3+w7XMXTwdf8BHKmXz/B/f4c2N+/joRz5AtJezlPuqKD/EgSO1xIZxH64g/ZL/SNO0/jNigoLrehx4t5JtFXtINqcpKSugoDTG4z99lWN7j9FY3YwywPJZWH6LQMiPP+SjqT7O9vW7mDBzHDv317DxjT144qGUSSphM2HWqNzx080pyqJB6m0XJZA/uZTmxjRVlXUYhkkw7MdoE0RiRRHijUmSzSksv0l+URQQJs8cRzrtsH17JdFoiEwizbEDdYw/bTShkJ9QyE9VdRPPPLuR66+bPyBzCcaPKaTinQP9ftz+YjsuAZ9FXg9DhTVNG1wjIii4jssvvv0sxw7UYPktEs0pDj9eRdWROtJpB9My8QUsDEORtl1S8RTNLfOiDMsgkh9h96Z9lEwo4cC+WmJ5IRzDY8qMsRQWRzm4/TBHdh3Fddxsr21Lu3/doVqUAiXgj1nEm5KkUja246JQ+P0mYyaVEAz78RyPSF6I0eOLCMdC7NtfgyBYloGKBKjcV0PZ5FJMKxtUSoqj7N1bTXVNM6WdDJU9VSVF0WE7cQ2yo6XKRhcM6zJq2vvRiAgK9TXN1B5rJBgJsPOt/aSTGSyfiSfgOB6+gIUv0Hn7vOd6NNU04XlCU3MKf2Eesy+YRijsp7G6iU0vbiaTzhCMBAl0kSbDdRyqD9eRSmUIluYTbVk5zAMypsnESaMoLmm/nkNVVSOBljKZpkHKcamraqRkbDbthFIKAfYfqBmQoFBcEAFk2E4OS6ZsJo0rGupiaJp2ghExXMXJODRUN/LOup2IJ0TywpiWhZ1xMU2DTMpBusi4aZgGvqAPX8BHY3OG5up6GmubqTlcx5ZXt4OCSH4Es4sOT9t2qKpqoimRxnY8Gg/W0FzXjGGZhKNB/H6LbVsOUVfbPhmf60m7IaE+v0Xlvpp22xhK4djuKd6dzvksk9MmjaK+KTEgxz8V2ZFYwuRynfdI04abEVFTsDMOlXurieSHcs0NjuPiuR6mZeB52QRwlr+byzGyTUl22mXLunexlBAriGJ2MfM4nbZpqIuTTGRIpmzM1iylhkHT4TrStocZ8BEM+ghHg+zedYxzCyfTGgeikQDNzalcbcEXsIg3JPFcL9cvISIUdbFiXH+Yf9ZEduw5OmDHP1nNiTRjSvMZUzr460Vrmta9EVFT8FyvXUAAaE0bmn1P2qXVFk/IpG1SiQyZtI14giegyDbZxOviNNbG8TpJZSEi1Nc2c+xIPbbtZkcyGQaGaaAMhWEZGJaBW9+MzzLIZBxqq5qoqWqkof54baFsbEF2/xatZU8mMgCkUjbBoI9J/bxaXFsTyorIj4ZIpjIDdo6TEU9kuGDOZN2foGnD0IgICspQcELabBHwPI9MMoNre7kVo13Ho7kpSSphk8k4pBI2zU0pbCcbOMR2MRAsn0X1kfp2OY5EhJqqJpoak/j8FpZl4jrCic8uwzLxHA+7OYVlmfj8JvHmNDu3Hck1YxUUhCkujtLcnGoXsFLNaZLJDHX1cZZdfha+fs6R1K6chuL8c6dQ33ji8tpDJ5W2Cfotpk0sHeqiaJrWiRERFBDaPVgzqQzVh2sRT3BcD9f1iDckSCczJOIpAEzLwDSN7GgfEdIZB9f1MMXD9JuYPgPXcWmoac4dt742TjKRxu+3jn+L7eLLrGEZZBoSiAhKKXw+k4b6BPv2ZFd/U0ox/fSxlJUVkkhmaI6nSSQyHKtqxPOEa6+Zx4w2SfwGyjkzxlFSFKWhaegDg4hQWx9n2UUzh91qcJqmZY2IoGD6TOJNqVwHZU1lA7btkR0vmv1xPSHekCSTdHDtbH9DayBRhmoZbir4LSPXpm/5LZrqE9mmplSG5qYkfr9F26qBZRmdzgxWpoG4LuJ4SEs1JZYf4vD+Ghobsp27hqGYMrmU+fOmcMb0sYwfX8iSC6dz6y0XM/30MQN924Bsh/PVl5xNIpXBcQemU7u3auqamTFlNGeeNvDBUNO0kzMigkIg6GNMeRHxpiRHD9dTX5fAdjxMU2H5TFonG3siiBI8V8ikHeyMg+O4uC0BItjywHdtD9fxyPYbK5rr49TXxLO5g05oK/L5rGxfRBcZIzzbwXU8/H4rmzfJb7F357ETjmFSXBylID/CuHGFg56jqGxUPhfOm0pVTXOPS5oOlGTKxjAMll10pu5L0LRhbETU4ZVSTJ5ZhitCatcxgiEfls/C5zdxbJfmlI1r+ZDWxdHSNtgOnqfA9lCmwgz6cV2XTCKN0ZKuWSlFIOSnsTaO0cWiOoahCAat3EOt3fNM5P+1d+dBctzXYce/r7vnnp3ZA7tYLHZxHwRAEuABkhJFkJRkidQRUi6yJEsRZcWOEpVcsVxWEtlVTmwnrorzh+TYUeKiLykuRY5lSZGi6IxFn5Io8RJBEpRIEACJe0/Mzuxc3f3yR/fO3gAWFPbgvk8VC9M93Ts9P2n69e96P3zfx014dHZGKbaTKY/yeI1KuUZu1mxdEX5qS4Yu1u03bueVM2O8fHqU9VdhXsTF1Bs+Y6UJ3vP2m2wGszEr3KoICgCDZ8YYPD1GV0+RZMLlwvA4YeigjhBmUqgf4DrRk36QSkIQIqG2Wpia2VRUY5DoGAlCJAxpNqL0024zwEu4885XmGxSqtWahNPmQ4QKKcdh/fpCdAxxplSgNDYxJyg06j4njw1y6uVhCsUMO/b0UWjPzjgmDJXShQmazQAhqiXl29ILPl03Gj6Nho/jRGtHL1QLSXguD95zA5/9P49xbqhE9xLNeK43fIbHytz/M/vZueXVL5dqjLm6VkVQUFVOHh0knU0RhiHqODRDmCjVCB2HMJXAc6MU1mE09hTHc/EAL+lS8wPIeMiEj4YBiEvoOHiEoEoQKBKEVEo1coX03MAgQjLpkUi4+H4YD2UV1PPpWV9sBYRJbtzpvKE/mrEbBCEvPHeaMydHSKRcvHj00iPfOMz+m7dyyx27OPqTszx/5DRnT40ShGF0w4472JMpj40DXezY3c2W7T0Mj1R59pmTHD8xxOjoBPGoXBzXYcOGIjt39LJ3bx/5WUEpnUrw3nfczOe//gTHT4+wfl1bFEivkvJEnXKlzgNvuYG91o9gzKogy9XGvBiberfq26/9EABjI9FoocmUy80gZAIHN17LQDXaR61B0hG8pEup9aJPlAAAGEhJREFU1kTyKQSHcLiEeA6Ig6jixgvuuJ5LIpNERMgXM3P6FmYLw5DGRIPevf2k0jMzffrNAMcVDhzchqry/OGTnDszRvf6AvsObG4dV681eObwScR16NvURS6XIpNNznna95sBlUqdkZESZ4fHybbl6O0t0lbIkEpNjZQKgpBqtcFEpQEC+6/fxKFDu8nMykRab/g88uhP+MHTJyjk0j/1TK1hGHJ+uExbPs39b76ezX0//XQWtVo0yiydtuYoK4spVhZTarUamUzmcVW9eTHnrYqaQrMZMH5hIspzlHDjeQuRhLgkQvA1SlynQNIV1BWCQGmU62jCxa37aCaJJBPg+zBZGRAgXjXNcRyCIMD3w4XXWFalXvepVuo4SY9zg+Nk0omZi9xIa24dpbEJRofLJJMefQNd8Z9QRkbKHH3xHH4zqnnk86k5zU2TXM9hbLzGqcESjiOURioEDZ+duzcg0/pBXNchn0+Tz6cJgpAfPf0yL7x4jvvvu5H+/qkbcyrpcc8de9mzvZcv/7+nOTtYoqs996rnTKgqpXKNSrXBLddt5q5bd85YMtQYs/KtitFHzbrfynPUbPg0as0oZ5CChiFuvYFWawS1Ok6zSQYln02SySRIJT2cMET9IPq26QTEQ1tFaU16Q2kNLQ39hYdu1hs+1VoDQcl05kkkXKq1JoND462RPUEQkkxF8fbsqVEAkgmPYkcWVeXUqVGOPHcax3HI5VO4rsP5Mxfm/bxarcHhZ0/xwrHzpFMe2UzUx9Co+zz95AlGp82zmG76Ijyf+9z3OHFiaM4xm/s6+RfvuZ033Lyd8UqNs4Mlxiu1RY9Q8v2AweFxzg1FweWh+2/hnkN7LSAYswqtippCGCrNRpN6tR7viRvRiVJaiCO4ce1BG0qlSitZXcJzaI5VaKiDug5OxkPrCaQRjSZSprKIykIz1SbFtQQJlUQ2jZtORim0Ex6Nuk+97kfrIzcDinEHcrXSIPBD+nZ04TgOp06OcPzYILlcsrVwj+e5VCv1GR9VrzU59tIgJ06NUK428FyhVq2Sz6ZoK+RJxeswH3nmFHuv76e9Y/7VdPL5FI4j/NUXfsgHf/4QnZ0zj0slE9x1y05ed2ArL544z/eePMbZ4XEm55BnMknSyQTixM1zodKMm6miNCCC5wo3XruJG/b0L1kHtjHm6lgVQUFVCfxwxtKNqkq91gCEVDox1QXgRk1BE+Ua+WIWx3XIZJKE4zV0tEImn6aRShI0/GjimSN4XtSBPMnx5q9AhaqEflRjSXW1zbz5CfjxIvSqUChGQaHZ9MnkkvRubKdUqnL8+CC5bHLGSm5hqK11FiBKxvf0069QrTWoNwMy6QSOCCIB5UqdWj2kp6eA57loCn787GluOLi1VTuZLZtNUqs1+cY3nubd77513hFKqaTHvp197N2xgdFSleHRMmcGS5w4PcLQaLQWdBgqnueSzSS4Ztt6NvV1sq4jT3dnntTFkhEaY1aNVfNLdmY9fQZB2Hqyj9ZGngoYEvc4Nxs+Xj5JoyOFW/AIRmqEFyZIJTyqmRRarUc1DAHHlWjUj+PMu26wquLXfUSEzPp2nNnHKLiO0GxEtYW2YoZmw6etkCWbi9ZsfuEnZ0kkvBmrt0HU/LJufbG1/fKJYfxmQK0ZRBPs4u8+mU6jVvOplOvk29IkEi7Nps+xF8+xe+/GBdNydHRkOfHyEEePnmfXRWZTiwidxSydxawNITVmDVoVfQqOI8xu5Q6DECROYRGEc97HES60uZzckmFoQ5LyjiLVW3qoD+QpdGTpXpcn31MklU9HcxxcIWgGZLLJGSOPNAzxaw38aoNcR46uHb34SKv/AaKlJV3PIRWvwbxpWzeBHzJ0fpz73nsrxc4cJ44NUqs1Sc16mq/XmqRSCTq6omadZjNgcHAcN+FQqzdnrCEN0T3f8xxK05LcZbMphobGW+k15iMi5HIpfvCDl5ZtVrMxZuVbHTWFOB3FZP/BbDrZYTztrXqbR2ljhkwjhEDJZ1xUYLw/h9tMkDxbxQ8cJhJJ3DwUi1nqE3WatSYahIQaJ9sDEoUM7esKtBWzcfrtChOVeuvzPM+le10b1Yk667rbKLZnGTxX4u57r+Pm23fSN9DJf/j451GiLK6O60RrQlcbeAmPPfsHWs1JtVo027re8KOvPk/7vOtEKbunr6rmug5nTo/NmQw3XVtbmlOnRyiVqhSLCx9njFm7VkdQUEimPWqVJo5EN0rHdVqrlsnczNpUetJ4gaIBpLJRn4MAyVCo9+W4tqODV44PEg6XCTNZ9rx+F109BZ557BjDFypUghDxnGgILMJoGDJemqC3Lcu6rjzNQgbfD3CcaGLbRKVOJpukq6fA6EiFt95/I/sPbgWimc+bd65Hg5Czp8ZoVhskkx6btvXQ3Vuc0RcQTURTanV/Rr/DrOKYOjaWTicZGRqn2fBJLNC+LxItFDQ0VLagYIyZ1+oICkTLWUaJ7qJRQ64bpb5WDfES3oyYEIaKn3FJBpBIujNyGrkhnBkrkznRwPMcskmXnl0bOPrjs5w9PcbA7l5O/egExDfX6TdmPwg5P16lr5glkXDjGc4B5fEahUKGznVtrOspcM/P3kT3tD6CU6dGSaUSdK8vMLD14usIZLOpaDTSeHVO09GkwA/izvWpbz35slKu09658P+sqjA0NM727dZfYIyZa1UEBYk7cJNpD3GEerUZdw47hPGoocmcRFFfg5AMwMslyMyabdzwfZgIybWlqJdrdPd3sXv/Zrb7IUeefoUXjp4nnUniZZJUyjX8ZojjCE487LXuRwn4PNVoxJIq63oK9A10cuuduzlwcNucNBknjw+RzlzemH3HETb2d/DK+QvzBgVVJQiVrkJm7ntMBoX5h6cCuK5QixMCGmPMbKsiKHgJl0JHjvELE1Hit7RHsxHgJFy8XIrQD/H9KIFcIpWgrSNL0ctwNu+i/lTLkgJVUTbXndYEta0HtiKOkEi67Ny7gcePnGLPNb0Mny+RSHo06k3qtSaNRrRGg69KGVjf2UZPMcPu6wY4ePtONm/vnjeZHsDgYGneDKwL6evrIHvkNPVaM0rSFweHph+gCu3FHOl5/p7nOpTLtYv+bVVdsAZijDGrIihoqBS72mjryNGs+6gqiXh1tHqt2VoCUxwhmUrgetGkNL+qDMcP1KIQaEhmtEF3Mkm1XOOa23aRnpb3J5NN4fsBbcUsff2dhPEkrepEg8CPxulfKFU5eNM27rrzGto7c5e1NoLfDOa9iS9EHGHDhnYuXJigWm3QqEedzrlcNJs5mZw/V5GIRDWliwhD6OzKX/a1GGPWliUPCiIyAPwPoBcIgYdV9b9c6rxquUomnyE1K7lbZoFkboLQNwGddSgnogGk3gWf8XMN6h01dty0na7+rhnnqCrFbJpKpUZbWxrHdcjl062cRKqKeC63vW4HXd2XvyaB6zrMHTN7ccW2DOVKnfXT+iZEgvg65j9HmX901nQCdHVaUFhtzg6XAOjtKizzlZjXuuVoR/CBX1XVPcBtwEdEZO/FTkjn02TyGcqj5Us+CU8nCJlA6K45dFcFHa1RLKTZtH8z67fO7WgtjU2wf/8ArudSrTbmvD88Umbjxg76+tov+xoAiu1Z6otsx++I8yQtRuCHZLPJBd+v1Zpkcym6rKawqpwdLvFHX/keD3/5e5wemj9HljE/LUteU1DVM8CZ+PW4iBwBNgLPLXSOCOy5Yxfnjp3j5POnAUjlUpfVdKMKjYk61Wqd7k3tPPDhn+GRbz5DtVYlmZxq0qnXGtRqNd529000NOSrX/sRYxfGSacShEFIoxnQ013g3rfspV6vX+QT5+rdWODc2WHS2csv7nzOI5Nx8P0micRk9tUoIC5cFwjJ5ROEwfwBaGysxKFD19BsNmiu8r7myRTJa0G9XiMMfNDoda02s3a8lsriUqwsplxpWSxrn4KIbAFuAB6d570PAR8CaC+si9rZd2ygY0MHgy8Pcf7YeerxYjeJpIeTcFtDNEM/wG/4BHGtotBdoHNzDw999K30berCSyf4228c5kKzChotaJNMe7z9gYP0bYpSTP+zD7yBF46e4+TJURJJl107ehno77yi9ZU39HXwxKMvLbZs2LSxgx+/OIjnJeadxDaf2WsnTJqoNkmnk1yz2xa7WW3WdxZ46N4oJf6GruIljjbm1Vm2oCAieeALwEdVtTT7fVV9GHgYYPuW3Tp8tkxPXzu5tjy5fXkGdg1QGi5RHq1QGhqnOl4lDCZv8Ak6+jtp68qTLmQZL1W58979bNu1EYAbDu5k3/VbOPHSILWJBrl8moFt60gkpoojnU5za2eRWw+++u+6c3c/ydQzhIEsas2C7q52hkbqjIxWyGWTU6OodO7faNR9cvks2Vx2TlUiCELGSxUefPAWOjtfWzeVtbKYytaNl/6ea6UsLoeVxZVblqAgIgmigPBZVf3ipY4vdOTYtruXo8+foaunQCLp4SZcOno76OjtWPC8SrnG+NgEh956HbfcsWvGe8lUgp17+l7tV7ksyZTHgZu38tj3j9Kz/vI7CkWEHVvXcbjaoFptkM0uHFAaDZ9tO9fPGxDOnStx++t32oQ1Y8wlLXlHs0TtIH8CHFHVT1zOOY4j3Pe+1/Omd97AhdEJBs+MtYZpzhalza5z7vQoKLz7F+/ktrv2LHuO/xsPbsPzHOq1xTXmJxMe1+7pI5NJUq40WpP0pqvXmuTzaTpmdSCXy3XOnx/njjt2cejQ7mUvA2PMyrccNYXbgfcDh0XkqXjfr6vq1y52kus63Pi6HWy/ZgPPPnGCJ77/Ihfi9ZpD1XhVTUEVOtbleeu7bmLXvv5FTRq7mgrFDG++93r+75cep7evfVE36FTS4/q9G3nlzDCnTo+hGpBOJXBdJ0rp4Yfs278hShqoSqVSp1Kp09aW4b0/dxubN6+7it/MGPNashyjj/6Biw2guYRiR47Xv2kvt951DWMjZUYGx2nUfUSi1da6utvIFzIr8ql43/UDHH9pkOcOv8L63uKirtF1HQb6OujuzDM4PMGZcxeo1ppUJxr09XdQrtSpTNRBobu7wBvv3suOHetJ2uI3xphFWLV3DNd16Oou0NW9eibziAj3vPMAfjPgx8+doqe3uOjRTOl0gi0DXWzoLnDmzBh7929i73X9iCPkc2m6unJks/NP6DPGmEtZtUFhtfI8l3f+7M10dOV49B9eIJdP0TZPcruFqCojw+NoCO968BauPbBpRdaKjDGrkwWFZeB6Dne+aR87d2/g6195knNnLpBMuRTbswuuoeD7AWMjJfxA2ba9jze/7XraOxbOhmqMMVfCgsIy6uvv5IP/8o2cPDHEEz88xksvnEU1SpM0meIiqgUonuey97oB9u3fRP+mHqsdGGOuCgsKy8xxhE1bu9m0NVrXeXSkzOhIhWbTR0RIpRJ0rstTKGZpNKL0GhYQjDFXiwWFFcT1HNb1FFjXs3o6z40xry222ooxxpgWCwrGGGNaLCgYY4xpsaBgjDGmxYKCMcaYFgsKxhhjWiwoGGOMabGgYIwxpsWCgjHGmBYLCsYYY1osKBhjjGmxoGCMMabFgoIxxpgWCwrGGGNaLCgYY4xpsaBgjDGmxYKCMcaYFgsKxhhjWiwoGGOMabGgYIwxpsWCgjHGmBYLCsYYY1osKBhjjGmxoGCMMabFgoIxxpgWCwrGGGNaLCgYY4xpsaBgjDGmxYKCMcaYlmUJCiJyj4j8WEReFJGPL8c1GGOMmWvJg4KIuMCngHuBvcDPicjepb4OY4wxc3nL8Jm3AC+q6ksAIvIXwH3AcwudEIYhtVptiS5v5bIymGJlMcXKYoqVxZQrLYvlCAobgVembZ8Ebp19kIh8CPhQvFnPZDLPLMG1rQbrgKHlvogVwspiipXFFCuLKbsXe8JyBAWZZ5/O2aH6MPAwgIg8pqo3X+0LWw2sLKZYWUyxsphiZTFFRB5b7DnL0dF8EhiYtt0PnF6G6zDGGDPLcgSFHwI7RWSriCSB9wBfWYbrMMYYM8uSNx+pqi8ivwR8E3CBP1XVZy9x2sNX/8pWDSuLKVYWU6wsplhZTFl0WYjqnOZ8Y4wxa5TNaDbGGNNiQcEYY0zLig4Kaz0dhoj8qYicF5Fnpu3rFJFvi8gL8b8dy3mNS0FEBkTkERE5IiLPisgvx/vXYlmkReQHIvKjuCx+K96/VUQejcvif8WDONYEEXFF5EkR+Wq8vSbLQkSOi8hhEXlqcijqlfxGVmxQsHQYAHwauGfWvo8Df62qO4G/jrdf63zgV1V1D3Ab8JH4/wtrsSzqwBtVdT9wALhHRG4Dfhf4ZFwWo8AvLOM1LrVfBo5M217LZXG3qh6YNk9j0b+RFRsUmJYOQ1UbwGQ6jDVDVf8OGJm1+z7gM/HrzwD3L+lFLQNVPaOqT8Svx4luABtZm2WhqlqONxPxfwq8EfireP+aKAsAEekH3g78cbwtrNGyWMCifyMrOSjMlw5j4zJdy0qyXlXPQHSzBHqW+XqWlIhsAW4AHmWNlkXcXPIUcB74NnAUGFNVPz5kLf1Wfg/4N0AYb3exdstCgW+JyONxmiC4gt/IcqS5uFyXlQ7DrB0ikge+AHxUVUvRQ+Hao6oBcEBE2oEvAXvmO2xpr2rpicg7gPOq+riI3DW5e55DX/NlEbtdVU+LSA/wbRF5/kr+yEquKVg6jPmdE5ENAPG/55f5epaEiCSIAsJnVfWL8e41WRaTVHUM+BuifpZ2EZl8yFsrv5XbgX8iIseJmpffSFRzWItlgaqejv89T/SwcAtX8BtZyUHB0mHM7yvAB+LXHwC+vIzXsiTiduI/AY6o6iemvbUWy6I7riEgIhngzUR9LI8AD8SHrYmyUNVfU9V+Vd1CdH/4jqq+jzVYFiKSE5G2ydfAW4BnuILfyIqe0SwibyOK/JPpMH5nmS9pSYnI54C7iFIBnwP+PfC/gb8ENgEvAw+q6uzO6NcUEXkD8PfAYabajn+dqF9hrZXF9UQdhi7RQ91fqupvi8g2oqflTuBJ4J+qan35rnRpxc1HH1PVd6zFsoi/85fiTQ/4n6r6OyLSxSJ/Iys6KBhjjFlaK7n5yBhjzBKzoGCMMabFgoIxxpgWCwrGGGNaLCgYY4xpsaBgVhUR6RWRvxCRoyLynIh8TUR2xe/tE5HviMhP4qyQvxHPcUBE3iciT8f/fVdE9i/w96dnmnxKRH5/kdf33Sv4Tr8tIm9e7HnGXA02JNWsGvEN/rvAZ1T1D+N9B4A24DGiyTofVtVviUiWaAb0V1X1UyLyeqLJb6Mici/wm6p66zyfcRy4WVWHluZbGbOyWE3BrCZ3A83JgACgqk+p6t8D7wX+UVW/Fe+fAH6JOFWwqn5XVUfj075PlP7gsonI34jIJ0Xk7+J1HQ6KyBfjGsl/nHZcOf53Q3zsUyLyjIjcESey+3S8fVhEfiU+9tMi8kD8+k3x2gCHJVpPIxXvPy4ivyUiT8TvXRPvv3NarebJyVmtxlwpCwpmNbkWeHyB9/bNfk9VjwJ5ESnMOvYXgK9f5HMemXaj/ZVp+xuqegj4Q6J0AR+Jr+nn45mj070X+KaqHgD2A08RrX+wUVWvVdXrgD+bfoKIpInW0Hh3/L4HfHjaIUOqeiPw34GPxfs+Bnwk/pw7gOpFvpcxl2RBwbxWCAtnw2ztF5G7iYLCv73I35pcqOSAqn5y2v7J3FuHgWfjdR7qwEvMTN4IUe6uD4rIbwLXxetAvARsE5E/EJF7gNKsc3YDx1T1J/H2Z4BD096fTAT4OLAlfv2PwCdE5F8B7dNSRhtzRSwomNXkWeCmi7x38/QdcT6YcnxDnswb9MfAfao6fAWfP5k/J5z2enJ7Rhr6eIGkQ8Ap4M9F5KG4+Wo/UWbTj8TXMuOSL/Pzg8nPU9X/BPwikAG+P9msZMyVsqBgVpPvACkR+eeTO+K2/TuBzwJvmBzFE2cQ/X3gP8fbm4ietN8/7Un8qhGRzUS5/v+IKMPrjSKyDnBU9QvAbwA3zjrteWCLiOyIt98P/O0lPme7qh5W1d8l6my3oGBelZW8yI4xM6iqisi7gN8TkY8DNeA40aI7VRG5D/gDEfkUURbRPwf+a3z6vyNaleu/xaNU/Wnr2M72iIgE8eunVfWhK7jcu4B/LSJNoAw8RLQC2J+JyOTD2K/N+n41Efkg8Pl4PYAfEvVfXMxH4yaxAHiOi/eVGHNJNiTVGGNMizUfGWOMabGgYIwxpsWCgjHGmBYLCsYYY1osKBhjjGmxoGCMMabFgoIxxpiW/w9KgjjIT/PLZgAAAABJRU5ErkJggg==\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "x_axis = final_merge_1954_df[\"CO2 Emissions\"]\n",
+    "y_axis = final_merge_1954_df[\"Birthrate\"]\n",
+    "\n",
+    "plt.xlabel(\"CO2 Emissions\")\n",
+    "plt.ylabel(\"Birthrate\")\n",
+    "plt.title(\"1954\")\n",
+    "plt.text(25, 9, r'Marker size = population', fontsize=8)\n",
+    "plt.text(25, 8, r'Marker color = per capita income', fontsize=8)\n",
+    "\n",
+    "plt.xlim(0,50)\n",
+    "plt.ylim(0,10)\n",
+    "\n",
+    "plt.grid(color='grey', linestyle='-', linewidth=0.25, alpha=0.5)\n",
+    "\n",
+    "plt.scatter(x_axis, y_axis, c=final_merge_1954_df['Income'],  \n",
+    "            alpha=0.5, s = final_merge_1954_df['Population']/scale_variable)\n",
+    "\n",
+    "plt.savefig(\"1954.png\", dpi=150)\n",
+    "\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 44,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "169"
+      ]
+     },
+     "execution_count": 44,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "first_merge_1984_df = pd.merge(co2_1984_df, birthrate_1984_df, on='country', how='inner')\n",
+    "first_merge_1984_df = first_merge_1984_df.dropna()\n",
+    "first_merge_1984_df = first_merge_1984_df.rename(columns={\"country\": \"Country\", \"1984_x\": \"CO2 Emissions\", \"1984_y\": \"Birthrate\"})\n",
+    "\n",
+    "second_merge_1984_df = pd.merge(population_1984_df, income_1984_df, on='country', how='inner')\n",
+    "second_merge_1984_df = second_merge_1984_df.dropna()\n",
+    "second_merge_1984_df = second_merge_1984_df.rename(columns={\"country\": \"Country\", \"1984_x\": \"Population\", \"1984_y\": \"Income\"})\n",
+    "\n",
+    "final_merge_1984_df = pd.merge(first_merge_1984_df, second_merge_1984_df, on='Country', how='inner')\n",
+    "\n",
+    "final_merge_1984_df.head()\n",
+    "len(final_merge_1984_df)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 45,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Country</th>\n",
+       "      <th>CO2 Emissions</th>\n",
+       "      <th>Birthrate</th>\n",
+       "      <th>Population</th>\n",
+       "      <th>Income</th>\n",
+       "      <th>Population Color</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>Afghanistan</td>\n",
+       "      <td>0.235</td>\n",
+       "      <td>7.46</td>\n",
+       "      <td>12000000</td>\n",
+       "      <td>1440</td>\n",
+       "      <td>0.008633</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>Albania</td>\n",
+       "      <td>2.700</td>\n",
+       "      <td>3.32</td>\n",
+       "      <td>2900000</td>\n",
+       "      <td>4440</td>\n",
+       "      <td>0.002086</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>Algeria</td>\n",
+       "      <td>3.250</td>\n",
+       "      <td>6.04</td>\n",
+       "      <td>21900000</td>\n",
+       "      <td>11100</td>\n",
+       "      <td>0.015755</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>Angola</td>\n",
+       "      <td>0.487</td>\n",
+       "      <td>7.39</td>\n",
+       "      <td>10300000</td>\n",
+       "      <td>4240</td>\n",
+       "      <td>0.007410</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>Antigua and Barbuda</td>\n",
+       "      <td>2.070</td>\n",
+       "      <td>2.10</td>\n",
+       "      <td>70700</td>\n",
+       "      <td>9960</td>\n",
+       "      <td>0.000051</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "               Country  CO2 Emissions  Birthrate  Population  Income  \\\n",
+       "0          Afghanistan          0.235       7.46    12000000    1440   \n",
+       "1              Albania          2.700       3.32     2900000    4440   \n",
+       "2              Algeria          3.250       6.04    21900000   11100   \n",
+       "3               Angola          0.487       7.39    10300000    4240   \n",
+       "4  Antigua and Barbuda          2.070       2.10       70700    9960   \n",
+       "\n",
+       "   Population Color  \n",
+       "0          0.008633  \n",
+       "1          0.002086  \n",
+       "2          0.015755  \n",
+       "3          0.007410  \n",
+       "4          0.000051  "
+      ]
+     },
+     "execution_count": 45,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "final_merge_1984_df['Population Color'] = final_merge_1984_df['Population']/max_pop\n",
+    "final_merge_1984_df.head()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 46,
+   "metadata": {
+    "scrolled": true
+   },
+   "outputs": [
+    {
+     "data": {
+      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEWCAYAAACJ0YulAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nOzdd3hc5Znw/+9zzpmmGXVZcu9gOgYbYmKDHdNsDCbZsCEOu8CV7FJ+S5zwsll2symksdndbJZN3iWEJJT8SHAIJJQANlWBUIxtsMHGBTfci6w+9ZT7/ePMjCRLsootyQPP57omkmZOec4xOfc87X6UiKBpmqZpAMZQF0DTNE07fuigoGmapuXpoKBpmqbl6aCgaZqm5emgoGmapuXpoKBpmqbl6aCgaZqm5emgoGmAUuoWpdRKpVRaKfXAYZ/9nVJqs1KqVSm1VCk1st1nIaXUPUqp/UqpeqXUU0qpUV0c/wSlVEop9dAgXI6m9ZsOCprm2wN8H7iv/ZtKqdnAncCVQAWwDXi43SZfAc4DzgBGAo3AT7s4/v8CK455qTXtGNNBQdMAEfmDiDwOHDrsoyuA34vIOhHJAN8DLlBKTcp+PgFYJiL7RSQFLAFObX8ApdTn8YPFiwN6EZp2DOigoGlHprKv9n8DnJb9+StgplJqpFKqCLgGeDa/sVIlwHeB2wahrJp21HRQ0LQjewb4nFLqDKVUBPgWIEBR9vNNwA5gN9AMnIwfBHK+B/xKRHYOXpE1rf90UNC0IxCRF4FvA48BHwLbgRZgV3aTnwFhoBKIAn8gW1NQSk0FLgL+e1ALrWlHQeksqZrWRin1fWC0iFzfzecnAu9kt2lQSq0F/lVEnsh+XgY0AMOAvwF+gB9EAGKACawXkbMH9EI0rZ90TUHTAKWUpZQK4z+0TaVUOPeeUuo05RsL3Av8j4g0ZHddAVyrlCpVSgWA/w/YIyJ12W0nAVOzr3uAp4FLB/nyNK3XdFDQNN83gCTwz/jf8JPZ98LAb4FW4C3gDeCb7fb7RyAFfAAcBC4DPgMgIgkR2Zd7ZY+REpGDg3JFmtYPuvlI0zRNy9M1BU3TNC1vwIKCUuo+pdSBbEdc7r0KpdTzSqkPsj/LB+r8mqZpWt8NZE3hAWDeYe/9M/CiiJyAP7vznwfw/JqmaVofDWifglJqPPAnETkt+/dGYI6I7FVKjQBqRWTKgBVA0zRN6xNrkM9XIyJ7AbKBobq7DZVSNwA3AESj0WlTpujY4XkeAIahu4L0vWij70UbfS/aeJ7H6tWr60RkWF/2G+yg0Gsici/+OG+mTZsmq1atGuISDb1UKgVAOBwe4pIMPX0v2uh70UbfizapVIpIJPJhX/cb7HC6P9tsRPbngUE+v6ZpmnYEgx0UngSuy/5+HfDEIJ9f0zRNO4KBHJL6MP7szylKqV1KqS8BPwQuVkp9AFyc/VvTNE07TgxYn4KILOrmowsH6pyapmna0dFd9JqmaVqeDgqapmlang4KmqZpWp4OCpqmaVqeDgqapmlang4KmqZpWp4OCpqmaVqeDgqapmlang4KmqZpWp4OCpqmaVqeDgqadhRqa2uxLIsDB/yEvytWrEApxfbt23u1/6xZs45ZWVavXs2vfvWrY3a8gTZnzhwcx+nys9raWrZu3QrA0qVLefrppwezaB9rOiho2lGaOnUqTzzhJ/z94x//yPTp03u1X25BmL440j5Tp07lS1/6Up+PeTxqHxTmzZvHggULhrhEHx86KGjaUZo7dy4vvvgiAOvWrePUU08F/G/us2fPZsaMGdx5550APPDAA1x99dUsWLCAd999N3+MxYsXs2TJEkSEm2++mblz57JgwQIaGhqora1l4cKFXHHFFSxbtiy/zx//+EfOPfdc5s2bx9KlS6mtreUb3/gGb731FnPmzGHOnDmUlJSwc+dOli9fzpw5c5g5cyb3339/v67zzDPPZNGiRUybNo0VK1YA8NBDDzFjxgxmzpzJmjVrAJgxYwY33HAD06dP509/+hPQsUY0Z86cDsddunQps2fPZvr06fz6178mk8nwwAMPcNttt3HbbbfxwAMP8Mtf/jJ/ny644AIuv/xympqa2L59O3PnzuWqq65i2rRp7Nq1q1/XprU5blde604mbdNSH8cwFCVVxZimjmva0AoGg4TDYd58801OPvlk9u3bB8CUKVOora1FKcWnPvUpbr31VgDKysr43e9+l9//K1/5Cueddx6f//zneeqppxg7diw/+9nPePbZZ7nnnns477zzyGQyLF26tMN5H3vsMR555BGGDx+OiLB8+XIAzj33XGpra3n22Wd5/PHHGTNmDH/3d3/Hk08+SXFxMRdffDHXXHMNwWAQgB07dnDttdd2OPaoUaP4zW9+0+G9nTt38tprr9HU1MSNN97IE088wU9+8hNee+01du/ezS233MKf/vQnDh48yDe+8Q0qKyu55JJLuPzyy494/y644ALmzZuH4zjMmTOHa6+9luuvv55Zs2Zx0UUX8cADDwB+01w8HueVV17hoYce4p577uHqq6+moaGBF154gYcffpjHH3+cW265pY//glp7BRMU4s1JVj7/Lqtr38d1XAQoioU599IzOXP2yViBgrkU7SPosssu46abbuLee+/l7rvvBmDbtm3cdtttJBIJNm7cmO93mDZtWn6/TZs2EQ6HueuuuwBYv349S5YsYdmyZTiOw3nnnQfA2Wef3emc3/jGN/j+979POp3m9ttv7/DZ1q1bueuuu3jyyScBWLNmDQsXLgSgrq6OgwcPMmrUKADGjh1LbW1tj9c4efJkYrEYsViMpqYmDh48yLhx4wgEAowfP56mpiYAKisrGTt2LACmaXY4hoh0Ou6qVav4zne+g23brFu3rtvzb9myJX8fpk+fzp///GcATjnlFAzDYNSoUWzYsKHH69COrCCepK7j8vB/PEnjwSYqhpcRCPrFTsXTvPDw62xfv4srb7pYBwZtyFx22WUsW7aMc845J//ez372M26//XbmzJnDrFmz8g/E9ovKn3jiiSxatIivfe1r/OhHP2LKlClce+213HbbbQDYts1rr73W5UL048aN45e//CUvv/wyP/nJT/jCF74AQCKR4MYbb+S+++4jFAoBcNZZZ/Hoo48SjUaxbZtAIJA/Tm9rCps3byYej9PU1ERJSQnDhg1j+/bt2LbN7t27KS0tBaC+vp5du3ZRUVGB67qAHwzS6TQbN27sdB3/8R//wS9/+UtGjRrFCSecAEAgEMjvmzNx4kSee+45AFauXMmkSZMAUErlt+kq6Gh9UxBP0ZaGOC0NrdSMrerwfjgaYsSEKras2cE7L6/jnEvOHKISah93sVis08ifBQsWcMstt3DKKafkm2q68qUvfYl/+7d/49///d/5p3/6JxYvXszcuXMB+OpXv0pJSUmX+91xxx28+eabtLS08MMfti1i+Nhjj7Fx40b+9m//FoAlS5bwne98h4ULF+J5HhUVFTz22GP57XtbUxgzZgxf/OIX2bx5M3fffTemaXLLLbdw/vnnYxgG//u//wtAVVUVd9xxB6tXr+Zb3/oW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\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "x_axis = final_merge_1984_df[\"CO2 Emissions\"]\n",
+    "y_axis = final_merge_1984_df[\"Birthrate\"]\n",
+    "\n",
+    "plt.xlabel(\"CO2 Emissions\")\n",
+    "plt.ylabel(\"Birthrate\")\n",
+    "plt.title(\"1984\")\n",
+    "plt.text(25, 9, r'Marker size = population', fontsize=8)\n",
+    "plt.text(25, 8, r'Marker color = per capita income', fontsize=8)\n",
+    "\n",
+    "\n",
+    "plt.xlim(0,50)\n",
+    "plt.ylim(0,10)\n",
+    "\n",
+    "plt.grid(color='grey', linestyle='-', linewidth=0.25, alpha=0.5)\n",
+    "\n",
+    "plt.scatter(x_axis, y_axis, c=final_merge_1984_df['Income'],  \n",
+    "            alpha=0.5, s = final_merge_1984_df['Population']/scale_variable)\n",
+    "\n",
+    "plt.savefig(\"1984.png\", dpi=150)\n",
+    "\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 47,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "184"
+      ]
+     },
+     "execution_count": 47,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "first_merge_2014_df = pd.merge(co2_2014_df, birthrate_2014_df, on='country', how='inner')\n",
+    "first_merge_2014_df = first_merge_2014_df.dropna()\n",
+    "first_merge_2014_df = first_merge_2014_df.rename(columns={\"country\": \"Country\", \"2014_x\": \"CO2 Emissions\", \"2014_y\": \"Birthrate\"})\n",
+    "\n",
+    "second_merge_2014_df = pd.merge(population_2014_df, income_2014_df, on='country', how='inner')\n",
+    "second_merge_2014_df = second_merge_2014_df.dropna()\n",
+    "second_merge_2014_df = second_merge_2014_df.rename(columns={\"country\": \"Country\", \"2014_x\": \"Population\", \"2014_y\": \"Income\"})\n",
+    "\n",
+    "final_merge_2014_df = pd.merge(first_merge_2014_df, second_merge_2014_df, on='Country', how='inner')\n",
+    "\n",
+    "final_merge_2014_df.head()\n",
+    "len(final_merge_2014_df)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 52,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "Country           object\n",
+       "CO2 Emissions    float64\n",
+       "Birthrate        float64\n",
+       "Population         int64\n",
+       "Income             int64\n",
+       "dtype: object"
+      ]
+     },
+     "execution_count": 52,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "#\n",
+    "\n",
+    "final_merge_2014_df.dtypes"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 57,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "Country           object\n",
+       "CO2 Emissions    float64\n",
+       "Birthrate        float64\n",
+       "Population       float64\n",
+       "Income           float64\n",
+       "dtype: object"
+      ]
+     },
+     "execution_count": 57,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "final_merge_2014_df = final_merge_2014_df.astype({\"Population\": float, \"Income\": float})\n",
+    "\n",
+    "final_merge_2014_df.dtypes"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 58,
+   "metadata": {},
+   "outputs": [
+    {
+     "ename": "TypeError",
+     "evalue": "cannot convert the series to <class 'float'>",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
+      "\u001b[1;32m<ipython-input-58-0850feb0a0c6>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mfinal_merge_2014_df\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Population Color'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmath\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlog10\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfinal_merge_2014_df\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Population'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mfinal_merge_2014_df\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32m~\\Anaconda3\\envs\\PythonData\\lib\\site-packages\\pandas\\core\\series.py\u001b[0m in \u001b[0;36mwrapper\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    129\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    130\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mconverter\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 131\u001b[1;33m         \u001b[1;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"cannot convert the series to \"\u001b[0m \u001b[1;34m\"{0}\"\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mconverter\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    132\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    133\u001b[0m     \u001b[0mwrapper\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"__{name}__\"\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mconverter\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;31mTypeError\u001b[0m: cannot convert the series to <class 'float'>"
+     ]
+    }
+   ],
+   "source": [
+    "final_merge_2014_df['Population Color'] = math.log10(final_merge_2014_df['Population'])\n",
+    "final_merge_2014_df.head()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "x_axis = final_merge_2014_df[\"CO2 Emissions\"]\n",
+    "y_axis = final_merge_2014_df[\"Birthrate\"]\n",
+    "\n",
+    "plt.xlabel(\"CO2 Emissions\")\n",
+    "plt.ylabel(\"Birthrate\")\n",
+    "plt.title(\"2014\")\n",
+    "plt.text(25, 9, r'Marker size = population', fontsize=8)\n",
+    "plt.text(25, 8, r'Marker color = per capita income', fontsize=8)\n",
+    "\n",
+    "plt.xlim(0,50)\n",
+    "plt.ylim(0,10)\n",
+    "\n",
+    "plt.grid(color='grey', linestyle='-', linewidth=0.25, alpha=0.5)\n",
+    "\n",
+    "plt.scatter(x_axis, y_axis, c=final_merge_2014_df['Income'],  \n",
+    "            alpha=0.5, s = final_merge_2014_df['Population']/scale_variable)\n",
+    "\n",
+    "plt.savefig(\"2014.png\", dpi=150)\n",
+    "\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# make a list of data points by year, and then graph those, because 'might as well'\n",
+    "\n",
+    "sample_list = [len(final_merge_1804_df), len(final_merge_1834_df), \n",
+    "               len(final_merge_1864_df), len(final_merge_1894_df), \n",
+    "               len(final_merge_1924_df), len(final_merge_1954_df),\n",
+    "              len(final_merge_1984_df), len(final_merge_2014_df)]\n",
+    "\n",
+    "sample_list"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Create a column chart of sample_list\n",
+    "\n",
+    "bar_labels = [\"1804\", \"1834\", \"1864\", \"1894\", \"1924\", \"1954\", \"1984\", \"2014\"]\n",
+    "\n",
+    "plt.ylabel(\"n datapoints\")\n",
+    "plt.title(\"Number of data points in sample\")\n",
+    "\n",
+    "plt.bar(bar_labels, height=sample_list)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# TO DO's\n",
+    "# - figure out how to put a color bar on the side for income\n",
+    "# - figure out how to add a legend for population size bubbles\n",
+    "\n",
+    "# see here for example: https://jakevdp.github.io/PythonDataScienceHandbook/04.06-customizing-legends.html"
+   ]
   },
   {
    "cell_type": "code",
@@ -937,7 +3226,6 @@
    "outputs": [],
    "source": [
     "# Bernt's code ends here"
-
    ]
   },
   {
@@ -946,9 +3234,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-
     "# Kaan's code starts here"
-
    ]
   },
   {
@@ -957,9 +3243,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-
     "# Kaan's code ends here"
-
    ]
   },
   {
@@ -968,9 +3252,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-
     "# Molly's code starts here"
-
    ]
   },
   {
@@ -979,9 +3261,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-
     "# Molly's code stops here"
-
    ]
   },
   {
@@ -990,9 +3270,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-
     "# Vallie's code starts here"
-
    ]
   },
   {
@@ -1001,7 +3279,6 @@
    "metadata": {},
    "outputs": [],
    "source": [
-
     "# Vallie's code stops here"
    ]
   },
@@ -1018,16 +3295,13 @@
    "metadata": {},
    "outputs": [],
    "source": []
-
   }
  ],
  "metadata": {
   "kernelspec": {
-
    "display_name": "Python 3",
    "language": "python",
    "name": "python3"
-
   },
   "language_info": {
    "codemirror_mode": {
